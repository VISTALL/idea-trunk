/* The following code was generated by JFlex 1.4.1 on 07.05.09 16:00 */

package com.intellij.coldFusion.model.lexer;

import com.intellij.coldFusion.model.CfmlUtil;
import com.intellij.coldFusion.model.psi.CfmlElementTypes;
import com.intellij.coldFusion.model.psi.tokens.CfmlTokenTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 07.05.09 16:00 from the specification file
 * <tt>ColdFusion.flex</tt>
 */
class _CfmlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int TAGOPEN = 3;
  public static final int TAGINNERBLOCK = 9;
  public static final int Y = 9;
  public static final int X = 9;
  public static final int TAGATTR = 4;
  public static final int DOUBLEQUOTE_CLOSER = 11;
  public static final int SINGLEQUOTE_CLOSER = 12;
  public static final int SINGLEQUOTE = 9;
  public static final int DOUBLEQUOTE = 9;
  public static final int SCRIPT_EXPRESSION = 14;
  public static final int COMMENTEND = 7;
  public static final int COMMENT = 6;
  public static final int ASSIGN = 5;
  public static final int TEXT = 15;
  public static final int CLOSER = 1;
  public static final int DOUBLE_QUOTED_STRING = 8;
  public static final int STRINGBEGIN = 13;
  public static final int TAGCLOSE = 2;
  public static final int YYINITIAL = 0;
  public static final int SINGLE_QUOTED_STRING = 10;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\14\2\5\1\0\2\5\16\14\4\0\1\5\1\2\1\15\1\17"+
    "\1\13\2\0\1\16\5\0\1\3\1\0\1\20\12\14\2\0\1\1"+
    "\1\6\1\4\1\0\1\21\2\13\1\11\2\13\1\12\24\13\4\0"+
    "\1\13\1\0\1\25\1\30\1\7\1\13\1\31\1\10\2\13\1\27"+
    "\2\13\1\23\1\22\4\13\1\26\3\13\1\24\4\13\4\0\41\14"+
    "\2\0\4\13\4\0\1\13\2\0\1\14\7\0\1\13\4\0\1\13"+
    "\5\0\27\13\1\0\37\13\1\0\u013f\13\31\0\162\13\4\0\14\13"+
    "\16\0\5\13\11\0\1\13\21\0\130\14\5\0\23\14\12\0\1\13"+
    "\13\0\1\13\1\0\3\13\1\0\1\13\1\0\24\13\1\0\54\13"+
    "\1\0\46\13\1\0\5\13\4\0\202\13\1\0\4\14\3\0\105\13"+
    "\1\0\46\13\2\0\2\13\6\0\20\13\41\0\46\13\2\0\1\13"+
    "\7\0\47\13\11\0\21\14\1\0\27\14\1\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\1\14\13\0\33\13\5\0\3\13\15\0\4\14"+
    "\14\0\6\14\13\0\32\13\5\0\13\13\16\14\7\0\12\14\4\0"+
    "\2\13\1\14\143\13\1\0\1\13\10\14\1\0\6\14\2\13\2\14"+
    "\1\0\4\14\2\13\12\14\3\13\2\0\1\13\17\0\1\14\1\13"+
    "\1\14\36\13\33\14\2\0\3\13\60\0\46\13\13\14\1\13\u014f\0"+
    "\3\14\66\13\2\0\1\14\1\13\20\14\2\0\1\13\4\14\3\0"+
    "\12\13\2\14\2\0\12\14\21\0\3\14\1\0\10\13\2\0\2\13"+
    "\2\0\26\13\1\0\7\13\1\0\1\13\3\0\4\13\2\0\1\14"+
    "\1\13\7\14\2\0\2\14\2\0\3\14\11\0\1\14\4\0\2\13"+
    "\1\0\3\13\2\14\2\0\12\14\4\13\15\0\3\14\1\0\6\13"+
    "\4\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13\1\0\2\13"+
    "\1\0\2\13\2\0\1\14\1\0\5\14\4\0\2\14\2\0\3\14"+
    "\13\0\4\13\1\0\1\13\7\0\14\14\3\13\14\0\3\14\1\0"+
    "\11\13\1\0\3\13\1\0\26\13\1\0\7\13\1\0\2\13\1\0"+
    "\5\13\2\0\1\14\1\13\10\14\1\0\3\14\1\0\3\14\2\0"+
    "\1\13\17\0\2\13\2\14\2\0\12\14\1\0\1\13\17\0\3\14"+
    "\1\0\10\13\2\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13"+
    "\1\0\5\13\2\0\1\14\1\13\6\14\3\0\2\14\2\0\3\14"+
    "\10\0\2\14\4\0\2\13\1\0\3\13\4\0\12\14\1\0\1\13"+
    "\20\0\1\14\1\13\1\0\6\13\3\0\3\13\1\0\4\13\3\0"+
    "\2\13\1\0\1\13\1\0\2\13\3\0\2\13\3\0\3\13\3\0"+
    "\10\13\1\0\3\13\4\0\5\14\3\0\3\14\1\0\4\14\11\0"+
    "\1\14\17\0\11\14\11\0\1\13\7\0\3\14\1\0\10\13\1\0"+
    "\3\13\1\0\27\13\1\0\12\13\1\0\5\13\4\0\7\14\1\0"+
    "\3\14\1\0\4\14\7\0\2\14\11\0\2\13\4\0\12\14\22\0"+
    "\2\14\1\0\10\13\1\0\3\13\1\0\27\13\1\0\12\13\1\0"+
    "\5\13\2\0\1\14\1\13\7\14\1\0\3\14\1\0\4\14\7\0"+
    "\2\14\7\0\1\13\1\0\2\13\4\0\12\14\22\0\2\14\1\0"+
    "\10\13\1\0\3\13\1\0\27\13\1\0\20\13\4\0\6\14\2\0"+
    "\3\14\1\0\4\14\11\0\1\14\10\0\2\13\4\0\12\14\22\0"+
    "\2\14\1\0\22\13\3\0\30\13\1\0\11\13\1\0\1\13\2\0"+
    "\7\13\3\0\1\14\4\0\6\14\1\0\1\14\1\0\10\14\22\0"+
    "\2\14\15\0\60\13\1\14\2\13\7\14\4\0\10\13\10\14\1\0"+
    "\12\14\47\0\2\13\1\0\1\13\2\0\2\13\1\0\1\13\2\0"+
    "\1\13\6\0\4\13\1\0\7\13\1\0\3\13\1\0\1\13\1\0"+
    "\1\13\2\0\2\13\1\0\4\13\1\14\2\13\6\14\1\0\2\14"+
    "\1\13\2\0\5\13\1\0\1\13\1\0\6\14\2\0\12\14\2\0"+
    "\2\13\42\0\1\13\27\0\2\14\6\0\12\14\13\0\1\14\1\0"+
    "\1\14\1\0\1\14\4\0\2\14\10\13\1\0\42\13\6\0\24\14"+
    "\1\0\2\14\4\13\4\0\10\14\1\0\44\14\11\0\1\14\71\0"+
    "\42\13\1\0\5\13\1\0\2\13\1\0\7\14\3\0\4\14\6\0"+
    "\12\14\6\0\6\13\4\14\106\0\46\13\12\0\51\13\7\0\132\13"+
    "\5\0\104\13\5\0\122\13\6\0\7\13\1\0\77\13\1\0\1\13"+
    "\1\0\4\13\2\0\7\13\1\0\1\13\1\0\4\13\2\0\47\13"+
    "\1\0\1\13\1\0\4\13\2\0\37\13\1\0\1\13\1\0\4\13"+
    "\2\0\7\13\1\0\1\13\1\0\4\13\2\0\7\13\1\0\7\13"+
    "\1\0\27\13\1\0\37\13\1\0\1\13\1\0\4\13\2\0\7\13"+
    "\1\0\47\13\1\0\23\13\16\0\11\14\56\0\125\13\14\0\u026c\13"+
    "\2\0\10\13\12\0\32\13\5\0\113\13\3\0\3\13\17\0\15\13"+
    "\1\0\4\13\3\14\13\0\22\13\3\14\13\0\22\13\2\14\14\0"+
    "\15\13\1\0\3\13\1\0\2\14\14\0\64\13\40\14\3\0\1\13"+
    "\3\0\2\13\1\14\2\0\12\14\41\0\3\14\2\0\12\14\6\0"+
    "\130\13\10\0\51\13\1\14\126\0\35\13\3\0\14\14\4\0\14\14"+
    "\12\0\12\14\36\13\2\0\5\13\u038b\0\154\13\224\0\234\13\4\0"+
    "\132\13\6\0\26\13\2\0\6\13\2\0\46\13\2\0\6\13\2\0"+
    "\10\13\1\0\1\13\1\0\1\13\1\0\1\13\1\0\37\13\2\0"+
    "\65\13\1\0\7\13\1\0\1\13\3\0\3\13\1\0\7\13\3\0"+
    "\4\13\2\0\6\13\4\0\15\13\5\0\3\13\1\0\7\13\17\0"+
    "\4\14\32\0\5\14\20\0\2\13\23\0\1\13\13\0\4\14\6\0"+
    "\6\14\1\0\1\13\15\0\1\13\40\0\22\13\36\0\15\14\4\0"+
    "\1\14\3\0\6\14\27\0\1\13\4\0\1\13\2\0\12\13\1\0"+
    "\1\13\3\0\5\13\6\0\1\13\1\0\1\13\1\0\1\13\1\0"+
    "\4\13\1\0\3\13\1\0\7\13\3\0\3\13\5\0\5\13\26\0"+
    "\44\13\u0e81\0\3\13\31\0\11\13\6\14\1\0\5\13\2\0\5\13"+
    "\4\0\126\13\2\0\2\14\2\0\3\13\1\0\137\13\5\0\50\13"+
    "\4\0\136\13\21\0\30\13\70\0\20\13\u0200\0\u19b6\13\112\0\u51a6\13"+
    "\132\0\u048d\13\u0773\0\u2ba4\13\u215c\0\u012e\13\2\0\73\13\225\0\7\13"+
    "\14\0\5\13\5\0\1\13\1\14\12\13\1\0\15\13\1\0\5\13"+
    "\1\0\1\13\1\0\2\13\1\0\2\13\1\0\154\13\41\0\u016b\13"+
    "\22\0\100\13\2\0\66\13\50\0\15\13\3\0\20\14\20\0\4\14"+
    "\17\0\2\13\30\0\3\13\31\0\1\13\6\0\5\13\1\0\207\13"+
    "\2\0\1\14\4\0\1\13\13\0\12\14\7\0\32\13\4\0\1\13"+
    "\1\0\32\13\12\0\132\13\3\0\6\13\2\0\6\13\2\0\6\13"+
    "\2\0\3\13\3\0\2\13\3\0\2\13\22\0\3\14\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\1\2\6\0\1\1\2\0\1\3\1\4"+
    "\1\5\1\4\1\6\3\4\1\7\1\1\1\10\1\4"+
    "\2\11\1\12\1\11\3\2\1\4\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\14\1\17\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\24\1\32"+
    "\1\4\1\33\4\0\1\34\1\35\11\0\1\36\1\0"+
    "\1\36\5\0\1\37\10\0\1\40\2\0\1\41\1\0"+
    "\1\42\3\0\1\43\4\0\1\44\10\0\1\45\1\0"+
    "\1\46\1\47\1\0\1\50\2\0\1\51\3\0\1\52"+
    "\1\53\1\54\1\0\1\55\1\0\1\56\20\0\1\57"+
    "\2\0\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\32\0\64\0\116\0\150\0\202\0\234\0\266"+
    "\0\320\0\352\0\u0104\0\u011e\0\u0138\0\u0152\0\u016c\0\u0186"+
    "\0\u01a0\0\u01ba\0\u01d4\0\u01d4\0\u01d4\0\u01ee\0\u0208\0\u0222"+
    "\0\u01d4\0\u023c\0\u0256\0\u0270\0\u01d4\0\u028a\0\u01d4\0\u0270"+
    "\0\u02a4\0\u02be\0\u02d8\0\u02f2\0\u030c\0\u0326\0\u0340\0\u035a"+
    "\0\u0374\0\u038e\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u03a8"+
    "\0\u03c2\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u03dc\0\u03f6\0\u0410"+
    "\0\u01d4\0\u042a\0\u0444\0\u045e\0\u0478\0\u0492\0\u04ac\0\u04c6"+
    "\0\u04e0\0\u04fa\0\u0514\0\u052e\0\u0548\0\u0562\0\u057c\0\u0326"+
    "\0\u0340\0\u0374\0\u038e\0\u0596\0\u05b0\0\u05ca\0\u05e4\0\u05fe"+
    "\0\u01d4\0\u0618\0\u0632\0\u064c\0\u0666\0\u0680\0\u069a\0\u06b4"+
    "\0\u06ce\0\u06e8\0\u0702\0\u071c\0\u0736\0\u0750\0\u076a\0\u0784"+
    "\0\u079e\0\u07b8\0\u01d4\0\u07d2\0\u07ec\0\u0806\0\u0820\0\u083a"+
    "\0\u0854\0\u086e\0\u0888\0\u08a2\0\u08bc\0\u08d6\0\u08f0\0\u090a"+
    "\0\u0924\0\u093e\0\u0958\0\u0972\0\u098c\0\u01d4\0\u09a6\0\u09c0"+
    "\0\u09da\0\u09f4\0\u0a0e\0\u0a28\0\u0a42\0\u01d4\0\u01d4\0\u0a5c"+
    "\0\u01d4\0\u0a76\0\u01d4\0\u0a42\0\u0a90\0\u0aaa\0\u0ac4\0\u0ade"+
    "\0\u0af8\0\u0b12\0\u0b2c\0\u0b46\0\u0b60\0\u0b7a\0\u0b94\0\u0bae"+
    "\0\u0bc8\0\u0be2\0\u0bfc\0\u0c16\0\u0c30\0\u0c4a\0\u01d4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\21\1\22\15\21\1\23\1\21\1\24\10\21\4\24"+
    "\1\25\34\24\1\26\1\24\1\26\27\24\1\27\1\24"+
    "\1\27\21\24\1\30\2\24\1\31\1\32\1\24\5\33"+
    "\4\24\1\34\1\24\10\33\1\35\1\36\2\35\1\31"+
    "\1\32\1\37\11\35\1\40\11\35\1\41\1\42\1\41"+
    "\1\43\26\41\3\24\1\44\26\24\15\45\1\46\1\45"+
    "\1\47\12\45\32\24\16\50\1\51\1\52\12\50\15\24"+
    "\1\53\32\24\1\54\20\24\1\32\7\24\1\55\1\56"+
    "\1\57\12\24\1\60\1\61\2\60\1\62\10\60\1\63"+
    "\1\64\1\65\1\66\11\60\1\67\1\70\15\67\1\71"+
    "\1\67\1\24\10\67\1\21\1\72\15\21\1\0\14\21"+
    "\1\73\4\21\1\74\1\21\1\74\6\21\1\75\11\21"+
    "\42\0\1\76\1\0\1\76\27\0\1\77\1\0\1\77"+
    "\21\0\1\100\4\0\1\101\1\0\1\101\6\0\1\102"+
    "\16\0\1\32\33\0\6\33\5\0\10\33\4\0\1\25"+
    "\27\0\1\100\4\0\1\103\1\0\1\103\6\0\1\104"+
    "\11\0\1\41\1\0\1\41\1\0\26\41\2\0\1\105"+
    "\32\0\1\106\31\0\1\107\26\0\15\45\1\110\1\45"+
    "\1\111\12\45\15\0\1\45\33\0\1\45\12\0\16\50"+
    "\1\112\1\113\12\50\16\0\1\50\32\0\1\50\12\0"+
    "\1\60\1\114\2\60\1\0\10\60\3\0\1\115\13\60"+
    "\1\116\4\60\1\117\1\60\1\117\6\60\1\120\15\60"+
    "\1\121\25\60\1\67\1\122\15\67\1\0\14\67\1\123"+
    "\4\67\1\124\1\67\1\124\6\67\1\125\11\67\2\21"+
    "\1\126\4\21\1\127\1\21\1\127\6\21\1\130\14\21"+
    "\1\131\36\21\1\132\1\21\1\132\26\21\1\133\1\21"+
    "\1\133\20\21\7\0\6\76\5\0\10\76\7\0\6\77"+
    "\5\0\10\77\3\0\1\134\36\0\1\135\1\0\1\135"+
    "\26\0\1\136\1\0\1\136\30\0\1\137\1\0\1\137"+
    "\26\0\1\140\1\0\1\140\23\0\1\141\31\0\1\142"+
    "\32\0\1\143\25\0\2\60\1\144\4\60\1\145\1\60"+
    "\1\145\6\60\1\146\15\60\1\0\30\60\1\147\36\60"+
    "\1\150\1\60\1\150\26\60\1\151\1\60\1\151\20\60"+
    "\2\67\1\152\4\67\1\153\1\67\1\153\6\67\1\154"+
    "\14\67\1\155\36\67\1\135\1\67\1\135\26\67\1\156"+
    "\1\67\1\156\20\67\3\21\1\157\36\21\1\0\1\21"+
    "\1\0\26\21\1\127\1\21\1\127\23\21\1\160\26\21"+
    "\7\0\6\132\5\0\10\132\10\21\1\161\1\21\1\161"+
    "\17\21\3\0\1\162\35\0\6\135\5\0\10\135\10\0"+
    "\1\163\1\0\1\163\26\0\6\137\5\0\10\137\10\0"+
    "\1\164\1\0\1\164\22\0\1\165\32\0\1\166\25\0"+
    "\3\60\1\167\36\60\1\0\1\60\1\0\26\60\1\145"+
    "\1\60\1\145\23\60\1\170\26\60\7\0\6\150\5\0"+
    "\10\150\10\60\1\171\1\60\1\171\17\60\3\67\1\172"+
    "\36\67\1\0\1\67\1\0\26\67\1\153\1\67\1\153"+
    "\23\67\1\173\36\67\1\163\1\67\1\163\17\67\3\21"+
    "\1\174\31\21\1\175\26\21\7\0\6\161\5\0\10\161"+
    "\3\0\1\176\35\0\6\163\5\0\10\163\7\0\6\164"+
    "\5\0\10\164\3\0\1\177\26\0\3\60\1\200\31\60"+
    "\1\201\26\60\7\0\6\171\5\0\10\171\3\67\1\202"+
    "\31\67\1\203\26\67\3\21\1\0\26\21\5\0\1\204"+
    "\13\0\1\205\10\0\3\60\1\0\26\60\3\67\1\0"+
    "\26\67\7\0\1\206\32\0\1\207\43\0\1\210\32\0"+
    "\1\211\32\0\1\212\32\0\1\213\32\0\1\214\32\0"+
    "\1\215\27\0\1\216\34\0\1\217\24\0\1\220\37\0"+
    "\4\221\1\222\31\221\1\223\31\221\1\223\1\224\25\221"+
    "\3\0\1\225\31\0\1\226\32\0\1\227\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3172];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\3\1\6\0\1\1\2\0\1\1\1\3\3\11"+
    "\2\1\1\3\1\11\3\1\1\11\1\3\1\11\2\1"+
    "\2\3\1\1\1\3\2\1\1\3\2\1\5\11\1\1"+
    "\1\3\4\11\2\1\1\3\1\11\3\0\1\2\2\1"+
    "\2\0\1\2\1\0\1\2\4\0\1\5\1\0\1\5"+
    "\4\0\1\2\1\11\3\0\1\2\4\0\1\5\2\0"+
    "\1\5\1\0\1\5\3\0\1\11\4\0\1\5\10\0"+
    "\1\5\1\0\2\5\1\0\1\15\2\0\1\5\3\0"+
    "\1\1\1\11\1\15\1\0\1\11\1\0\1\11\20\0"+
    "\1\1\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  CfmlLexerConfiguration myCurrentConfiguration = new CfmlLexerConfiguration();

  public _CfmlLexer() {
    this((java.io.Reader)null);
  }

  public class CfmlLexerConfiguration {
      public boolean myArePoundsEvaluated = false;
      public int myCommentCounter = 0;
      public int mySharpCounter = 0;
      public boolean myIfReturnExpression = false;
      public Stack<Integer> myReturnStack = new Stack<Integer>();
      // to give to other lexer
      public IElementType myBlockType = CfmlElementTypes.TEMPLATE_TEXT;
      public boolean myStartExpression = true;
      public String myCurrentTag = "cfelse";

      public CfmlLexerConfiguration() {}

      public void reset() {
          myCommentCounter = 0;
          mySharpCounter = 0;
          myIfReturnExpression = false;
          myReturnStack.clear();
          myBlockType = CfmlElementTypes.TEMPLATE_TEXT;
          myStartExpression = true;
          myCurrentTag = "cfelse";
      }
  }

  private void releaseExpressionState() {
    myCurrentConfiguration.mySharpCounter = 0;
    myCurrentConfiguration.myIfReturnExpression = false;
    myCurrentConfiguration.myReturnStack.clear();
  }

  private IElementType startComment(int stateToReturnTo) {
    myCurrentConfiguration.myReturnStack.push(stateToReturnTo);
    myCurrentConfiguration.myCommentCounter++;
    yybegin(COMMENT);
    return CfmlTokenTypes.COMMENT;
  }

  private IElementType startTag() {
    releaseExpressionState();
    yybegin(TAGOPEN); return CfmlTokenTypes.OPENER;
  }

  private IElementType startCloseTag() {
    myCurrentConfiguration.myArePoundsEvaluated = false;
    yybegin(TAGCLOSE); return CfmlTokenTypes.LSLASH_ANGLEBRACKET;
  }

  private IElementType closeStartedTag() {
        myCurrentConfiguration.myStartExpression = true;
        if (myCurrentConfiguration.myCurrentTag.equals("cfscript")) {
            myCurrentConfiguration.myStartExpression = false;
            myCurrentConfiguration.myBlockType = CfmlTokenTypes.SCRIPT_EXPRESSION;
            yybegin(YYINITIAL);
        } else if (myCurrentConfiguration.myCurrentTag.equals("cfquery")) {
            myCurrentConfiguration.myBlockType = CfmlElementTypes.SQL;
            myCurrentConfiguration.myArePoundsEvaluated = true;
            yybegin(YYINITIAL);
        } else if (myCurrentConfiguration.myCurrentTag.equals("cfoutput")) {
            myCurrentConfiguration.myArePoundsEvaluated = true;
            // yybegin(TEXT);
            yybegin(YYINITIAL);
        } else {
            yybegin(YYINITIAL);
        }
        if (CfmlUtil.isSingleCfmlTag(myCurrentConfiguration.myCurrentTag))
            return CfmlTokenTypes.CLOSER;
        return CfmlTokenTypes.R_ANGLEBRACKET;
  }

  private IElementType startExpression(int stateToReturn) {
        myCurrentConfiguration.mySharpCounter++;
        myCurrentConfiguration.myReturnStack.push(stateToReturn);
        yybegin(SCRIPT_EXPRESSION);
        if (myCurrentConfiguration.mySharpCounter == 1) {
            return myCurrentConfiguration.myStartExpression ? CfmlTokenTypes.START_EXPRESSION : CfmlTokenTypes.SCRIPT_EXPRESSION;
        }
        return CfmlTokenTypes.SCRIPT_EXPRESSION;
  }

  private IElementType closeTag() {
    yybegin(YYINITIAL); return CfmlTokenTypes.CLOSER;
  }


  _CfmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _CfmlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1718) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
    myCurrentConfiguration.reset();
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
    myCurrentConfiguration.reset();
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;

      zzWasPushback = false;

      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { yybegin(YYINITIAL); return CfmlTokenTypes.BAD_CHARACTER;
          }
        case 48: break;
        case 45: 
          { return startComment(SCRIPT_EXPRESSION);
          }
        case 49: break;
        case 8: 
          { yybegin(ASSIGN);
    return CfmlTokenTypes.ATTRIBUTE;
          }
        case 50: break;
        case 3: 
          { return myCurrentConfiguration.myBlockType;
          }
        case 51: break;
        case 44: 
          { myCurrentConfiguration.myCommentCounter++; return CfmlTokenTypes.COMMENT;
          }
        case 52: break;
        case 28: 
          { yybegin(CLOSER); return CfmlTokenTypes.CF_TAG_NAME;
          }
        case 53: break;
        case 40: 
          { myCurrentConfiguration.myCommentCounter--;
    if (myCurrentConfiguration.myCommentCounter == 0) {
        yybegin(COMMENTEND);
    }
    return CfmlTokenTypes.COMMENT;
          }
        case 54: break;
        case 35: 
          { yybegin(myCurrentConfiguration.myReturnStack.pop()); return CfmlTokenTypes.COMMENT;
          }
        case 55: break;
        case 13: 
          { return startExpression(DOUBLE_QUOTED_STRING);
          }
        case 56: break;
        case 32: 
          { myCurrentConfiguration.myBlockType = CfmlElementTypes.TEMPLATE_TEXT;
    return startTag();
          }
        case 57: break;
        case 34: 
          { yybegin(TAGOPEN); return CfmlTokenTypes.OPENER;
          }
        case 58: break;
        case 29: 
          { myCurrentConfiguration.myCurrentTag = yytext().toString().toLowerCase();
    if (!CfmlUtil.hasAnyAttributes(myCurrentConfiguration.myCurrentTag)) {
        myCurrentConfiguration.myStartExpression = false;
        yybegin(SCRIPT_EXPRESSION);
    } else {
        myCurrentConfiguration.myStartExpression = true;
        yybegin(TAGATTR);
    }
    return CfmlTokenTypes.CF_TAG_NAME;
          }
        case 59: break;
        case 17: 
          { myCurrentConfiguration.myReturnStack.push(TAGATTR);
    yybegin(DOUBLE_QUOTED_STRING);
    return CfmlTokenTypes.DOUBLE_QUOTE;
          }
        case 60: break;
        case 14: 
          { yybegin(SINGLEQUOTE_CLOSER);
    if (myCurrentConfiguration.myIfReturnExpression) {
        return CfmlTokenTypes.SCRIPT_EXPRESSION;
    }
    return CfmlTokenTypes.STRING_TEXT;
          }
        case 61: break;
        case 33: 
          { return startTag();
          }
        case 62: break;
        case 5: 
          { if (myCurrentConfiguration.myArePoundsEvaluated) {
        return startExpression(YYINITIAL);
    } else {
        return myCurrentConfiguration.myBlockType;
    }
          }
        case 63: break;
        case 20: 
          { myCurrentConfiguration.myIfReturnExpression = true;
    return CfmlTokenTypes.SCRIPT_EXPRESSION;
          }
        case 64: break;
        case 1: 
          { return CfmlTokenTypes.WHITE_SPACE;
          }
        case 65: break;
        case 15: 
          { yybegin(myCurrentConfiguration.myReturnStack.pop());
    if (myCurrentConfiguration.myIfReturnExpression) {
        return CfmlTokenTypes.SCRIPT_EXPRESSION;
    }
    return CfmlTokenTypes.SINGLE_QUOTE_CLOSER;
          }
        case 66: break;
        case 2: 
          { return CfmlTokenTypes.COMMENT;
          }
        case 67: break;
        case 37: 
          { myCurrentConfiguration.myBlockType = CfmlElementTypes.TEMPLATE_TEXT; return startCloseTag();
          }
        case 68: break;
        case 26: 
          { return CfmlElementTypes.TEMPLATE_TEXT;
          }
        case 69: break;
        case 19: 
          { return startExpression(TAGATTR);
          }
        case 70: break;
        case 31: 
          { releaseExpressionState(); return closeTag();
          }
        case 71: break;
        case 16: 
          { return startExpression(SINGLE_QUOTED_STRING);
          }
        case 72: break;
        case 11: 
          { yybegin(DOUBLEQUOTE_CLOSER);
    if (myCurrentConfiguration.myIfReturnExpression) {
        return CfmlTokenTypes.SCRIPT_EXPRESSION;
    }
    return CfmlTokenTypes.STRING_TEXT;
          }
        case 73: break;
        case 23: 
          { myCurrentConfiguration.myIfReturnExpression = true;
    myCurrentConfiguration.myReturnStack.push(SCRIPT_EXPRESSION);
    yybegin(DOUBLE_QUOTED_STRING);
    return CfmlTokenTypes.SCRIPT_EXPRESSION;
          }
        case 74: break;
        case 22: 
          { releaseExpressionState(); return closeStartedTag();
          }
        case 75: break;
        case 27: 
          { return startExpression(TEXT);
          }
        case 76: break;
        case 18: 
          { myCurrentConfiguration.myReturnStack.push(TAGATTR);
    yybegin(SINGLE_QUOTED_STRING);
    return CfmlTokenTypes.SINGLE_QUOTE;
          }
        case 77: break;
        case 39: 
          { yybegin(TAGCLOSE); return CfmlTokenTypes.LSLASH_ANGLEBRACKET;
          }
        case 78: break;
        case 41: 
          { releaseExpressionState(); yybegin(TAGCLOSE); return CfmlTokenTypes.LSLASH_ANGLEBRACKET;
          }
        case 79: break;
        case 12: 
          { yybegin(myCurrentConfiguration.myReturnStack.pop());
    if (myCurrentConfiguration.myIfReturnExpression) {
        return CfmlTokenTypes.SCRIPT_EXPRESSION;
    }
    return CfmlTokenTypes.DOUBLE_QUOTE_CLOSER;
          }
        case 80: break;
        case 6: 
          { return closeTag();
          }
        case 81: break;
        case 38: 
          { return startCloseTag();
          }
        case 82: break;
        case 36: 
          { releaseExpressionState(); yybegin(TAGOPEN); return CfmlTokenTypes.OPENER;
          }
        case 83: break;
        case 21: 
          { releaseExpressionState(); yybegin(YYINITIAL); return CfmlTokenTypes.BAD_CHARACTER;
          }
        case 84: break;
        case 7: 
          { return closeStartedTag();
          }
        case 85: break;
        case 42: 
          { return startComment(YYINITIAL);
          }
        case 86: break;
        case 10: 
          { yybegin(STRINGBEGIN); return CfmlTokenTypes.ASSIGN;
          }
        case 87: break;
        case 46: 
          { return startComment(TEXT);
          }
        case 88: break;
        case 47: 
          { return CfmlTokenTypes.VAR_ANNOTATION;
          }
        case 89: break;
        case 24: 
          { myCurrentConfiguration.myIfReturnExpression = true;
    myCurrentConfiguration.myReturnStack.push(SCRIPT_EXPRESSION);
    yybegin(SINGLE_QUOTED_STRING);
    return CfmlTokenTypes.SCRIPT_EXPRESSION;
          }
        case 90: break;
        case 25: 
          { myCurrentConfiguration.myIfReturnExpression = true;
    if (!myCurrentConfiguration.myStartExpression && myCurrentConfiguration.mySharpCounter == 0) {
        return startExpression(SCRIPT_EXPRESSION);
    }
    myCurrentConfiguration.mySharpCounter--;
    yybegin(myCurrentConfiguration.myReturnStack.pop());
    if (myCurrentConfiguration.mySharpCounter == 0 && myCurrentConfiguration.myStartExpression) {
        myCurrentConfiguration.myIfReturnExpression = false;
        return CfmlTokenTypes.END_EXPRESSION;
    }
    return CfmlTokenTypes.SCRIPT_EXPRESSION;
          }
        case 91: break;
        case 9: 
          { yybegin(STRINGBEGIN); return CfmlTokenTypes.BAD_CHARACTER;
          }
        case 92: break;
        case 43: 
          { return startComment(TAGATTR);
          }
        case 93: break;
        case 30: 
          { if (myCurrentConfiguration.myIfReturnExpression) {
        return CfmlTokenTypes.SCRIPT_EXPRESSION;
    }
    return CfmlTokenTypes.STRING_TEXT;
          }
        case 94: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
