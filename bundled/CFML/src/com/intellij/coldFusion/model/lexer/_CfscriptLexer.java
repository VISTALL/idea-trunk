/* The following code was generated by JFlex 1.4.1 on 06.05.09 13:48 */

package com.intellij.coldFusion.model.lexer;

import com.intellij.coldFusion.model.CfmlUtil;
import com.intellij.coldFusion.model.psi.tokens.CfmlTokenTypes;
import com.intellij.coldFusion.model.psi.tokens.CfscriptTokenTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 06.05.09 13:48 from the specification file
 * <tt>ColdFusionScript.flex</tt>
 */
class _CfscriptLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int Y = 5;
  public static final int X = 5;
  public static final int SINGLEQUOTE_CLOSER = 4;
  public static final int DOUBLEQUOTE_CLOSER = 3;
  public static final int DOUBLE_QUOTED_STRING = 1;
  public static final int SINGLE_QUOTED_STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int EXPRESSION = 5;
  public static final int COMMENT = 6;
  public static final int COMMENTEND = 7;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\7\1\17\1\0\1\7\1\16\16\6\4\0\1\112\1\2"+
    "\1\13\1\15\1\5\1\63\1\47\1\14\1\51\1\52\1\21\1\62"+
    "\1\50\1\3\1\12\1\20\1\10\11\11\1\60\1\57\1\1\1\61"+
    "\1\4\1\0\1\22\1\75\1\5\1\113\1\73\1\101\1\5\1\114"+
    "\1\115\1\67\2\5\1\111\1\71\1\70\1\72\1\105\1\102\1\76"+
    "\1\107\1\74\1\110\1\103\1\5\1\77\2\5\1\53\1\64\1\54"+
    "\1\65\1\5\1\0\1\30\1\33\1\23\1\36\1\34\1\24\1\116"+
    "\1\45\1\32\1\5\1\35\1\26\1\25\1\41\1\42\1\106\1\104"+
    "\1\31\1\43\1\40\1\37\1\27\1\44\1\100\1\46\1\5\1\55"+
    "\1\66\1\56\1\0\41\6\2\0\4\5\4\0\1\5\2\0\1\6"+
    "\7\0\1\5\4\0\1\5\5\0\27\5\1\0\37\5\1\0\u013f\5"+
    "\31\0\162\5\4\0\14\5\16\0\5\5\11\0\1\5\21\0\130\6"+
    "\5\0\23\6\12\0\1\5\13\0\1\5\1\0\3\5\1\0\1\5"+
    "\1\0\24\5\1\0\54\5\1\0\46\5\1\0\5\5\4\0\202\5"+
    "\1\0\4\6\3\0\105\5\1\0\46\5\2\0\2\5\6\0\20\5"+
    "\41\0\46\5\2\0\1\5\7\0\47\5\11\0\21\6\1\0\27\6"+
    "\1\0\3\6\1\0\1\6\1\0\2\6\1\0\1\6\13\0\33\5"+
    "\5\0\3\5\15\0\4\6\14\0\6\6\13\0\32\5\5\0\13\5"+
    "\16\6\7\0\12\6\4\0\2\5\1\6\143\5\1\0\1\5\10\6"+
    "\1\0\6\6\2\5\2\6\1\0\4\6\2\5\12\6\3\5\2\0"+
    "\1\5\17\0\1\6\1\5\1\6\36\5\33\6\2\0\3\5\60\0"+
    "\46\5\13\6\1\5\u014f\0\3\6\66\5\2\0\1\6\1\5\20\6"+
    "\2\0\1\5\4\6\3\0\12\5\2\6\2\0\12\6\21\0\3\6"+
    "\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\1\5"+
    "\3\0\4\5\2\0\1\6\1\5\7\6\2\0\2\6\2\0\3\6"+
    "\11\0\1\6\4\0\2\5\1\0\3\5\2\6\2\0\12\6\4\5"+
    "\15\0\3\6\1\0\6\5\4\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\2\5\1\0\2\5\2\0\1\6\1\0\5\6"+
    "\4\0\2\6\2\0\3\6\13\0\4\5\1\0\1\5\7\0\14\6"+
    "\3\5\14\0\3\6\1\0\11\5\1\0\3\5\1\0\26\5\1\0"+
    "\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5\10\6\1\0"+
    "\3\6\1\0\3\6\2\0\1\5\17\0\2\5\2\6\2\0\12\6"+
    "\1\0\1\5\17\0\3\6\1\0\10\5\2\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5\6\6"+
    "\3\0\2\6\2\0\3\6\10\0\2\6\4\0\2\5\1\0\3\5"+
    "\4\0\12\6\1\0\1\5\20\0\1\6\1\5\1\0\6\5\3\0"+
    "\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5\3\0"+
    "\2\5\3\0\3\5\3\0\10\5\1\0\3\5\4\0\5\6\3\0"+
    "\3\6\1\0\4\6\11\0\1\6\17\0\11\6\11\0\1\5\7\0"+
    "\3\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0"+
    "\5\5\4\0\7\6\1\0\3\6\1\0\4\6\7\0\2\6\11\0"+
    "\2\5\4\0\12\6\22\0\2\6\1\0\10\5\1\0\3\5\1\0"+
    "\27\5\1\0\12\5\1\0\5\5\2\0\1\6\1\5\7\6\1\0"+
    "\3\6\1\0\4\6\7\0\2\6\7\0\1\5\1\0\2\5\4\0"+
    "\12\6\22\0\2\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0"+
    "\20\5\4\0\6\6\2\0\3\6\1\0\4\6\11\0\1\6\10\0"+
    "\2\5\4\0\12\6\22\0\2\6\1\0\22\5\3\0\30\5\1\0"+
    "\11\5\1\0\1\5\2\0\7\5\3\0\1\6\4\0\6\6\1\0"+
    "\1\6\1\0\10\6\22\0\2\6\15\0\60\5\1\6\2\5\7\6"+
    "\4\0\10\5\10\6\1\0\12\6\47\0\2\5\1\0\1\5\2\0"+
    "\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5\1\0"+
    "\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5\1\6"+
    "\2\5\6\6\1\0\2\6\1\5\2\0\5\5\1\0\1\5\1\0"+
    "\6\6\2\0\12\6\2\0\2\5\42\0\1\5\27\0\2\6\6\0"+
    "\12\6\13\0\1\6\1\0\1\6\1\0\1\6\4\0\2\6\10\5"+
    "\1\0\42\5\6\0\24\6\1\0\2\6\4\5\4\0\10\6\1\0"+
    "\44\6\11\0\1\6\71\0\42\5\1\0\5\5\1\0\2\5\1\0"+
    "\7\6\3\0\4\6\6\0\12\6\6\0\6\5\4\6\106\0\46\5"+
    "\12\0\51\5\7\0\132\5\5\0\104\5\5\0\122\5\6\0\7\5"+
    "\1\0\77\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0\1\5"+
    "\1\0\4\5\2\0\47\5\1\0\1\5\1\0\4\5\2\0\37\5"+
    "\1\0\1\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5"+
    "\2\0\7\5\1\0\7\5\1\0\27\5\1\0\37\5\1\0\1\5"+
    "\1\0\4\5\2\0\7\5\1\0\47\5\1\0\23\5\16\0\11\6"+
    "\56\0\125\5\14\0\u026c\5\2\0\10\5\12\0\32\5\5\0\113\5"+
    "\3\0\3\5\17\0\15\5\1\0\4\5\3\6\13\0\22\5\3\6"+
    "\13\0\22\5\2\6\14\0\15\5\1\0\3\5\1\0\2\6\14\0"+
    "\64\5\40\6\3\0\1\5\3\0\2\5\1\6\2\0\12\6\41\0"+
    "\3\6\2\0\12\6\6\0\130\5\10\0\51\5\1\6\126\0\35\5"+
    "\3\0\14\6\4\0\14\6\12\0\12\6\36\5\2\0\5\5\u038b\0"+
    "\154\5\224\0\234\5\4\0\132\5\6\0\26\5\2\0\6\5\2\0"+
    "\46\5\2\0\6\5\2\0\10\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\37\5\2\0\65\5\1\0\7\5\1\0\1\5\3\0"+
    "\3\5\1\0\7\5\3\0\4\5\2\0\6\5\4\0\15\5\5\0"+
    "\3\5\1\0\7\5\17\0\4\6\32\0\5\6\20\0\2\5\23\0"+
    "\1\5\13\0\4\6\6\0\6\6\1\0\1\5\15\0\1\5\40\0"+
    "\22\5\36\0\15\6\4\0\1\6\3\0\6\6\27\0\1\5\4\0"+
    "\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\3\5\1\0\7\5\3\0"+
    "\3\5\5\0\5\5\26\0\44\5\u0e81\0\3\5\31\0\11\5\6\6"+
    "\1\0\5\5\2\0\5\5\4\0\126\5\2\0\2\6\2\0\3\5"+
    "\1\0\137\5\5\0\50\5\4\0\136\5\21\0\30\5\70\0\20\5"+
    "\u0200\0\u19b6\5\112\0\u51a6\5\132\0\u048d\5\u0773\0\u2ba4\5\u215c\0\u012e\5"+
    "\2\0\73\5\225\0\7\5\14\0\5\5\5\0\1\5\1\6\12\5"+
    "\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5"+
    "\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0\15\5"+
    "\3\0\20\6\20\0\4\6\17\0\2\5\30\0\3\5\31\0\1\5"+
    "\6\0\5\5\1\0\207\5\2\0\1\6\4\0\1\5\13\0\12\6"+
    "\7\0\32\5\4\0\1\5\1\0\32\5\12\0\132\5\3\0\6\5"+
    "\2\0\6\5\2\0\6\5\2\0\3\5\3\0\2\5\3\0\2\5"+
    "\22\0\3\6\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\2\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\17\7\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\2\15\7\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\40\1\43\3\1\1\2\1\0\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\2\0\1\54\1\55"+
    "\4\7\1\56\1\57\3\7\1\60\1\7\1\61\1\62"+
    "\2\7\1\62\1\7\1\63\3\7\1\64\2\7\1\65"+
    "\1\66\1\67\1\70\1\71\1\7\1\62\7\7\1\62"+
    "\1\57\1\56\1\7\1\72\1\7\1\73\1\7\1\72"+
    "\1\0\1\74\1\0\1\74\5\0\2\75\1\0\4\7"+
    "\1\76\1\7\1\56\1\7\1\77\1\7\1\100\1\0"+
    "\2\7\1\101\3\7\1\102\1\103\1\104\2\7\1\0"+
    "\1\104\1\105\1\7\1\106\5\7\2\0\1\107\1\0"+
    "\2\75\2\0\1\7\1\110\3\7\1\0\1\7\1\0"+
    "\1\7\1\111\3\7\1\0\2\7\2\0\6\7\1\0"+
    "\1\112\1\113\1\0\1\114\3\7\1\0\1\115\1\7"+
    "\1\0\1\116\1\62\1\7\2\0\1\7\1\117\4\0"+
    "\3\7\1\120\1\0\3\7\1\0\1\121\1\103\1\7"+
    "\2\0\1\122\3\0\3\7\1\0\3\7\1\0\1\123"+
    "\5\0\3\7\1\0\1\124\1\125\1\126\11\0\1\57"+
    "\3\0\1\57\25\0\2\72\27\0\1\127\3\0\2\130"+
    "\20\0\1\56\6\0\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229"+
    "\0\u0278\0\u02c7\0\u0316\0\u0365\0\u03b4\0\u0403\0\u0452\0\u04a1"+
    "\0\u04f0\0\u0278\0\u0278\0\u0278\0\u0278\0\u053f\0\u058e\0\u05dd"+
    "\0\u062c\0\u067b\0\u06ca\0\u0719\0\u0768\0\u07b7\0\u0806\0\u0855"+
    "\0\u08a4\0\u08f3\0\u0942\0\u0991\0\u09e0\0\u0a2f\0\u0a7e\0\u0278"+
    "\0\u0278\0\u0278\0\u0278\0\u0278\0\u0278\0\u0278\0\u0278\0\u0278"+
    "\0\u0acd\0\u0b1c\0\u0278\0\u0278\0\u0278\0\u0b6b\0\u0bba\0\u0c09"+
    "\0\u0c58\0\u0ca7\0\u0cf6\0\u0d45\0\u0d94\0\u0de3\0\u0e32\0\u0e81"+
    "\0\u0ed0\0\u0f1f\0\u0f6e\0\u0fbd\0\u100c\0\u105b\0\u10aa\0\u10f9"+
    "\0\u1148\0\u0278\0\u0278\0\u1197\0\u11e6\0\u1235\0\u1284\0\u12d3"+
    "\0\u0278\0\u0278\0\u0278\0\u0278\0\u0278\0\u0278\0\u1322\0\u1371"+
    "\0\u13c0\0\u0278\0\u0278\0\u140f\0\u145e\0\u14ad\0\u14fc\0\u154b"+
    "\0\u159a\0\u15e9\0\u1638\0\u1687\0\u0403\0\u16d6\0\u0403\0\u1725"+
    "\0\u1774\0\u17c3\0\u1812\0\u1861\0\u18b0\0\u18ff\0\u194e\0\u199d"+
    "\0\u0403\0\u19ec\0\u1a3b\0\u0278\0\u0278\0\u0278\0\u0278\0\u0278"+
    "\0\u1a8a\0\u1ad9\0\u1b28\0\u1b77\0\u1bc6\0\u1c15\0\u1c64\0\u1cb3"+
    "\0\u1d02\0\u1d51\0\u1da0\0\u1def\0\u1e3e\0\u1e8d\0\u1edc\0\u0403"+
    "\0\u1f2b\0\u1f7a\0\u100c\0\u105b\0\u10f9\0\u1148\0\u1fc9\0\u2018"+
    "\0\u2067\0\u20b6\0\u2105\0\u2154\0\u21a3\0\u21f2\0\u2241\0\u2290"+
    "\0\u22df\0\u232e\0\u0403\0\u237d\0\u0403\0\u23cc\0\u0403\0\u241b"+
    "\0\u0403\0\u246a\0\u24b9\0\u2508\0\u0403\0\u2557\0\u25a6\0\u25f5"+
    "\0\u0403\0\u0403\0\u2644\0\u2693\0\u26e2\0\u2731\0\u2780\0\u0403"+
    "\0\u27cf\0\u0403\0\u281e\0\u286d\0\u28bc\0\u290b\0\u295a\0\u29a9"+
    "\0\u29f8\0\u0278\0\u2a47\0\u2a96\0\u0278\0\u21a3\0\u2ae5\0\u2b34"+
    "\0\u0403\0\u2b83\0\u2bd2\0\u2c21\0\u2c70\0\u2cbf\0\u2d0e\0\u2d5d"+
    "\0\u0403\0\u2dac\0\u2dfb\0\u2e4a\0\u2e99\0\u2ee8\0\u2f37\0\u2f86"+
    "\0\u2fd5\0\u3024\0\u3073\0\u30c2\0\u3111\0\u3160\0\u31af\0\u31fe"+
    "\0\u0278\0\u0278\0\u324d\0\u0403\0\u329c\0\u32eb\0\u333a\0\u3389"+
    "\0\u33d8\0\u3427\0\u3476\0\u0403\0\u0403\0\u34c5\0\u3514\0\u3563"+
    "\0\u35b2\0\u0403\0\u3601\0\u3650\0\u369f\0\u36ee\0\u373d\0\u378c"+
    "\0\u37db\0\u0278\0\u382a\0\u3879\0\u38c8\0\u3917\0\u3966\0\u0403"+
    "\0\u0278\0\u39b5\0\u3a04\0\u3a53\0\u0403\0\u3aa2\0\u3af1\0\u3b40"+
    "\0\u3b8f\0\u3bde\0\u3c2d\0\u3c7c\0\u3ccb\0\u3d1a\0\u3d69\0\u3db8"+
    "\0\u0403\0\u3e07\0\u3e56\0\u3ea5\0\u3ef4\0\u3f43\0\u3f92\0\u3fe1"+
    "\0\u4030\0\u407f\0\u0403\0\u0403\0\u0403\0\u40ce\0\u411d\0\u416c"+
    "\0\u41bb\0\u420a\0\u4259\0\u42a8\0\u42f7\0\u4346\0\u4395\0\u43e4"+
    "\0\u4433\0\u4482\0\u44d1\0\u4520\0\u456f\0\u45be\0\u460d\0\u465c"+
    "\0\u46ab\0\u46fa\0\u4749\0\u4798\0\u47e7\0\u4836\0\u4885\0\u48d4"+
    "\0\u4923\0\u4972\0\u49c1\0\u4a10\0\u4a5f\0\u4aae\0\u4afd\0\u4b4c"+
    "\0\u4b9b\0\u4bea\0\u4c39\0\u4c88\0\u4cd7\0\u4d26\0\u4d75\0\u4dc4"+
    "\0\u4e13\0\u4e62\0\u4eb1\0\u4f00\0\u4f4f\0\u4f9e\0\u4fed\0\u503c"+
    "\0\u508b\0\u50da\0\u5129\0\u5178\0\u51c7\0\u5216\0\u5265\0\u52b4"+
    "\0\u5303\0\u0278\0\u5352\0\u53a1\0\u53f0\0\u543f\0\u0278\0\u548e"+
    "\0\u54dd\0\u552c\0\u557b\0\u55ca\0\u5619\0\u5668\0\u56b7\0\u5706"+
    "\0\u5755\0\u57a4\0\u57f3\0\u5842\0\u5891\0\u58e0\0\u592f\0\u0278"+
    "\0\u597e\0\u59cd\0\u5a1c\0\u5a6b\0\u5aba\0\u5b09\0\u0278";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\11\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\2\17\1\26"+
    "\1\27\1\11\1\30\1\31\1\16\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\16\1\41\1\16\1\42"+
    "\1\43\1\44\1\45\1\46\2\16\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\16\1\74\1\16\1\75\1\76\1\77"+
    "\7\16\1\100\1\17\1\101\1\102\1\16\1\103\13\104"+
    "\1\105\1\104\1\106\101\104\14\107\1\110\1\111\101\107"+
    "\13\11\1\112\117\11\1\113\221\11\1\114\1\115\1\114"+
    "\1\116\113\114\3\11\1\117\113\11\121\0\1\120\56\0"+
    "\1\121\116\0\1\122\40\0\1\123\55\0\1\124\116\0"+
    "\1\125\42\0\2\16\1\0\2\16\1\126\10\0\24\16"+
    "\20\0\23\16\1\0\4\16\7\0\1\17\6\0\2\17"+
    "\72\0\1\17\16\0\1\127\114\0\2\21\1\127\124\0"+
    "\1\130\1\131\37\0\1\132\116\0\1\133\42\0\2\16"+
    "\1\0\2\16\1\126\10\0\5\16\1\134\11\16\1\135"+
    "\4\16\20\0\23\16\1\0\4\16\5\0\2\16\1\0"+
    "\2\16\1\126\10\0\14\16\1\136\2\16\1\137\4\16"+
    "\20\0\23\16\1\0\4\16\5\0\2\16\1\0\2\16"+
    "\1\126\10\0\11\16\1\140\3\16\1\141\6\16\20\0"+
    "\23\16\1\0\4\16\5\0\2\16\1\0\2\16\1\126"+
    "\10\0\5\16\1\142\16\16\20\0\23\16\1\0\4\16"+
    "\5\0\2\16\1\0\2\16\1\126\10\0\16\16\1\143"+
    "\5\16\20\0\23\16\1\0\4\16\5\0\2\16\1\0"+
    "\2\16\1\126\10\0\11\16\1\144\12\16\20\0\23\16"+
    "\1\0\4\16\5\0\2\16\1\0\2\16\1\126\10\0"+
    "\1\16\1\145\1\146\13\16\1\147\1\16\1\150\3\16"+
    "\20\0\23\16\1\0\4\16\5\0\2\16\1\0\2\16"+
    "\1\126\10\0\6\16\1\151\15\16\20\0\23\16\1\0"+
    "\4\16\5\0\2\16\1\0\2\16\1\126\10\0\3\16"+
    "\1\152\20\16\20\0\15\16\1\153\5\16\1\0\4\16"+
    "\5\0\2\16\1\0\2\16\1\126\10\0\11\16\1\154"+
    "\5\16\1\155\4\16\20\0\23\16\1\0\4\16\5\0"+
    "\2\16\1\0\2\16\1\126\10\0\6\16\1\156\15\16"+
    "\20\0\23\16\1\0\4\16\5\0\2\16\1\0\2\16"+
    "\1\126\10\0\11\16\1\157\5\16\1\160\4\16\20\0"+
    "\23\16\1\0\4\16\5\0\2\16\1\0\2\16\1\126"+
    "\10\0\6\16\1\161\15\16\20\0\23\16\1\0\4\16"+
    "\5\0\2\16\1\0\2\16\1\126\10\0\21\16\1\162"+
    "\2\16\20\0\23\16\1\0\4\16\5\0\2\16\1\0"+
    "\2\16\1\126\10\0\22\16\1\163\1\16\20\0\23\16"+
    "\1\0\4\16\47\0\1\164\130\0\1\165\116\0\1\166"+
    "\1\167\122\0\1\170\35\0\2\16\1\0\2\16\1\126"+
    "\10\0\24\16\20\0\1\16\1\147\1\171\15\16\1\172"+
    "\2\16\1\0\4\16\5\0\2\16\1\0\2\16\1\126"+
    "\10\0\24\16\20\0\3\16\1\173\6\16\1\174\10\16"+
    "\1\0\4\16\5\0\2\16\1\0\2\16\1\126\10\0"+
    "\24\16\20\0\3\16\1\175\17\16\1\0\4\16\5\0"+
    "\2\16\1\0\2\16\1\126\10\0\24\16\20\0\7\16"+
    "\1\161\13\16\1\0\4\16\5\0\2\16\1\0\2\16"+
    "\1\126\10\0\24\16\20\0\3\16\1\176\17\16\1\0"+
    "\4\16\5\0\2\16\1\0\2\16\1\126\10\0\24\16"+
    "\20\0\1\16\1\177\21\16\1\0\4\16\5\0\2\16"+
    "\1\0\2\16\1\126\10\0\24\16\20\0\3\16\1\200"+
    "\17\16\1\0\4\16\5\0\2\16\1\0\2\16\1\126"+
    "\10\0\17\16\1\201\4\16\20\0\23\16\1\0\4\16"+
    "\5\0\2\16\1\0\2\16\1\126\10\0\24\16\20\0"+
    "\13\16\1\202\7\16\1\0\4\16\5\0\2\16\1\0"+
    "\2\16\1\126\10\0\24\16\20\0\5\16\1\203\4\16"+
    "\1\204\10\16\1\0\4\16\5\0\2\16\1\0\2\16"+
    "\1\126\10\0\24\16\20\0\3\16\1\205\17\16\1\0"+
    "\4\16\5\0\2\16\1\0\2\16\1\126\10\0\24\16"+
    "\20\0\5\16\1\206\1\16\1\207\2\16\1\210\10\16"+
    "\1\0\4\16\5\0\2\16\1\0\2\16\1\126\10\0"+
    "\6\16\1\211\2\16\1\210\3\16\1\212\6\16\20\0"+
    "\23\16\1\0\4\16\13\104\1\213\1\104\1\214\101\104"+
    "\13\0\1\104\120\0\1\104\101\0\14\107\1\215\1\216"+
    "\101\107\14\0\1\107\117\0\1\107\101\0\1\114\1\0"+
    "\1\114\1\0\113\114\2\0\1\217\117\0\1\220\116\0"+
    "\1\221\116\0\1\222\123\0\2\127\105\0\7\223\1\130"+
    "\6\223\1\224\1\225\72\223\1\130\4\223\21\131\1\226"+
    "\75\131\5\0\2\16\1\0\2\16\1\126\10\0\15\16"+
    "\1\227\2\16\1\230\3\16\20\0\23\16\1\0\4\16"+
    "\5\0\2\16\1\0\2\16\1\126\10\0\16\16\1\231"+
    "\5\16\20\0\23\16\1\0\4\16\5\0\2\16\1\0"+
    "\2\16\1\126\10\0\16\16\1\232\5\16\20\0\23\16"+
    "\1\0\4\16\5\0\2\16\1\0\2\16\1\126\10\0"+
    "\6\16\1\233\15\16\20\0\23\16\1\0\4\16\5\0"+
    "\2\16\1\0\2\16\1\126\10\0\20\16\1\234\3\16"+
    "\20\0\23\16\1\0\4\16\5\0\2\16\1\0\2\16"+
    "\1\126\10\0\11\16\1\235\12\16\20\0\23\16\1\0"+
    "\4\16\5\0\2\16\1\0\2\16\1\126\10\0\6\16"+
    "\1\236\15\16\20\0\23\16\1\0\4\16\5\0\2\16"+
    "\1\0\2\16\1\126\10\0\13\16\1\237\10\16\20\0"+
    "\23\16\1\0\4\16\5\0\2\16\1\0\2\16\1\126"+
    "\10\0\15\16\1\240\6\16\20\0\23\16\1\0\4\16"+
    "\5\0\2\16\1\0\2\16\1\126\10\0\24\16\20\0"+
    "\17\16\1\241\3\16\1\0\4\16\5\0\2\16\1\0"+
    "\2\16\1\126\10\0\24\16\20\0\23\16\1\242\4\16"+
    "\5\0\2\16\1\0\2\16\1\126\10\0\11\16\1\243"+
    "\12\16\20\0\23\16\1\0\4\16\5\0\2\16\1\0"+
    "\2\16\1\126\10\0\20\16\1\244\3\16\20\0\23\16"+
    "\1\0\4\16\5\0\2\16\1\0\2\16\1\126\10\0"+
    "\4\16\1\245\7\16\1\246\7\16\20\0\23\16\1\0"+
    "\4\16\5\0\2\16\1\0\2\16\1\126\10\0\1\16"+
    "\1\247\22\16\20\0\23\16\1\0\4\16\5\0\2\16"+
    "\1\0\2\16\1\126\10\0\11\16\1\250\12\16\20\0"+
    "\23\16\1\0\4\16\5\0\2\16\1\0\2\16\1\126"+
    "\10\0\23\16\1\251\20\0\23\16\1\0\4\16\5\0"+
    "\2\16\1\0\2\16\1\126\10\0\24\16\20\0\15\16"+
    "\1\252\5\16\1\0\4\16\5\0\2\16\1\0\2\16"+
    "\1\126\10\0\15\16\1\253\6\16\20\0\23\16\1\0"+
    "\4\16\5\0\2\16\1\0\2\16\1\126\10\0\7\16"+
    "\1\254\14\16\20\0\23\16\1\0\4\16\5\0\2\16"+
    "\1\0\2\16\1\126\10\0\7\16\1\255\14\16\20\0"+
    "\23\16\1\0\4\16\5\0\2\16\1\0\2\16\1\126"+
    "\10\0\24\16\20\0\16\16\1\241\4\16\1\0\4\16"+
    "\5\0\2\16\1\0\2\16\1\126\10\0\24\16\20\0"+
    "\23\16\1\256\4\16\5\0\2\16\1\0\2\16\1\126"+
    "\10\0\24\16\20\0\5\16\1\257\15\16\1\0\4\16"+
    "\5\0\2\16\1\0\2\16\1\126\10\0\24\16\20\0"+
    "\13\16\1\252\7\16\1\0\4\16\5\0\2\16\1\0"+
    "\2\16\1\126\10\0\24\16\20\0\4\16\1\260\16\16"+
    "\1\0\4\16\5\0\2\16\1\0\2\16\1\126\10\0"+
    "\24\16\20\0\12\16\1\261\10\16\1\0\4\16\5\0"+
    "\2\16\1\0\2\16\1\126\10\0\24\16\20\0\4\16"+
    "\1\237\16\16\1\0\4\16\5\0\2\16\1\0\2\16"+
    "\1\126\10\0\24\16\20\0\7\16\1\262\13\16\1\0"+
    "\4\16\5\0\2\16\1\0\2\16\1\126\10\0\6\16"+
    "\1\262\15\16\20\0\23\16\1\0\4\16\5\0\2\16"+
    "\1\0\2\16\1\126\10\0\24\16\20\0\14\16\1\245"+
    "\4\16\1\263\1\16\1\0\4\16\5\0\2\16\1\0"+
    "\2\16\1\126\10\0\24\16\20\0\12\16\1\235\10\16"+
    "\1\0\4\16\5\0\2\16\1\0\2\16\1\126\10\0"+
    "\24\16\20\0\20\16\1\264\2\16\1\0\4\16\5\0"+
    "\2\16\1\0\2\16\1\126\10\0\24\16\20\0\1\16"+
    "\1\265\21\16\1\0\4\16\5\0\2\16\1\0\2\16"+
    "\1\126\10\0\24\16\20\0\12\16\1\210\10\16\1\0"+
    "\4\16\5\0\2\16\1\0\2\16\1\126\10\0\24\16"+
    "\20\0\12\16\1\266\10\16\1\0\4\16\5\0\2\16"+
    "\1\0\2\16\1\126\10\0\11\16\1\267\12\16\20\0"+
    "\23\16\1\0\4\16\5\0\2\16\1\0\2\16\1\126"+
    "\10\0\11\16\1\210\12\16\20\0\23\16\1\0\4\16"+
    "\3\0\1\270\116\0\1\271\117\0\1\272\115\0\1\273"+
    "\113\0\16\223\1\274\1\275\77\223\7\0\1\276\6\0"+
    "\1\276\1\225\2\0\1\277\67\0\1\276\13\0\1\276"+
    "\6\0\2\276\2\0\1\277\67\0\1\276\4\0\20\131"+
    "\1\275\1\226\75\131\5\0\2\16\1\0\2\16\1\126"+
    "\10\0\1\300\23\16\20\0\23\16\1\0\4\16\5\0"+
    "\2\16\1\0\2\16\1\126\10\0\11\16\1\301\12\16"+
    "\20\0\23\16\1\0\4\16\5\0\2\16\1\0\2\16"+
    "\1\126\10\0\15\16\1\302\6\16\20\0\23\16\1\0"+
    "\4\16\5\0\2\16\1\0\2\16\1\126\10\0\1\303"+
    "\23\16\20\0\23\16\1\0\4\16\5\0\2\16\1\0"+
    "\2\16\1\126\10\0\20\16\1\304\3\16\20\0\23\16"+
    "\1\0\4\16\5\0\2\16\1\305\2\16\1\126\3\0"+
    "\2\305\3\0\24\16\20\0\23\16\1\305\4\16\5\0"+
    "\2\16\1\0\2\16\1\126\10\0\14\16\1\306\7\16"+
    "\20\0\23\16\1\0\4\16\41\0\1\307\62\0\2\16"+
    "\1\0\2\16\1\126\10\0\5\16\1\310\16\16\20\0"+
    "\23\16\1\0\4\16\5\0\2\16\1\0\2\16\1\126"+
    "\10\0\11\16\1\311\12\16\20\0\23\16\1\0\4\16"+
    "\5\0\2\16\1\0\2\16\1\126\10\0\5\16\1\312"+
    "\16\16\20\0\23\16\1\0\4\16\5\0\2\16\1\0"+
    "\2\16\1\126\10\0\5\16\1\313\16\16\20\0\23\16"+
    "\1\0\4\16\5\0\2\16\1\0\2\16\1\126\10\0"+
    "\20\16\1\314\3\16\20\0\23\16\1\0\4\16\5\0"+
    "\2\16\1\0\2\16\1\126\10\0\24\16\20\0\23\16"+
    "\1\315\4\16\5\0\2\16\1\0\2\16\1\126\10\0"+
    "\15\16\1\316\6\16\20\0\23\16\1\0\4\16\5\0"+
    "\2\16\1\0\2\16\1\126\10\0\3\16\1\317\20\16"+
    "\20\0\23\16\1\0\4\16\70\0\1\320\33\0\2\16"+
    "\1\0\2\16\1\126\10\0\24\16\20\0\23\16\1\321"+
    "\4\16\5\0\2\16\1\0\2\16\1\126\10\0\24\16"+
    "\20\0\20\16\1\322\2\16\1\0\4\16\5\0\2\16"+
    "\1\0\2\16\1\126\10\0\24\16\20\0\6\16\1\323"+
    "\14\16\1\0\4\16\5\0\2\16\1\0\2\16\1\126"+
    "\10\0\24\16\20\0\20\16\1\324\2\16\1\0\4\16"+
    "\5\0\2\16\1\0\2\16\1\126\10\0\24\16\20\0"+
    "\5\16\1\325\15\16\1\0\4\16\5\0\2\16\1\0"+
    "\2\16\1\126\10\0\24\16\20\0\6\16\1\326\14\16"+
    "\1\0\4\16\5\0\2\16\1\0\2\16\1\126\10\0"+
    "\5\16\1\327\16\16\20\0\23\16\1\0\4\16\3\0"+
    "\1\330\117\0\1\331\115\0\1\332\132\0\1\275\122\0"+
    "\1\333\100\0\2\16\1\0\2\16\1\126\10\0\22\16"+
    "\1\334\1\16\20\0\23\16\1\0\4\16\5\0\2\16"+
    "\1\0\2\16\1\126\10\0\5\16\1\335\1\16\1\336"+
    "\14\16\20\0\23\16\1\0\4\16\5\0\2\16\1\0"+
    "\2\16\1\126\10\0\15\16\1\337\6\16\20\0\23\16"+
    "\1\0\4\16\5\0\2\16\1\0\2\16\1\126\10\0"+
    "\24\16\20\0\23\16\1\340\4\16\5\0\1\341\1\0"+
    "\1\305\6\0\2\305\3\0\24\341\20\0\23\341\1\305"+
    "\4\341\5\0\2\16\1\0\2\16\1\126\10\0\6\16"+
    "\1\342\15\16\20\0\23\16\1\0\4\16\42\0\1\343"+
    "\61\0\2\16\1\0\2\16\1\126\10\0\12\16\1\344"+
    "\11\16\20\0\23\16\1\0\4\16\5\0\2\16\1\0"+
    "\2\16\1\126\10\0\3\16\1\345\20\16\20\0\23\16"+
    "\1\0\4\16\5\0\2\16\1\0\2\16\1\126\10\0"+
    "\14\16\1\346\7\16\20\0\23\16\1\0\4\16\5\0"+
    "\2\16\1\0\2\16\1\126\10\0\24\16\20\0\23\16"+
    "\1\347\4\16\34\0\1\350\67\0\2\16\1\0\2\16"+
    "\1\126\10\0\1\351\23\16\20\0\23\16\1\0\4\16"+
    "\5\0\2\16\1\0\2\16\1\126\10\0\11\16\1\352"+
    "\12\16\20\0\23\16\1\0\4\16\72\0\1\353\125\0"+
    "\1\354\22\0\2\16\1\0\2\16\1\126\10\0\24\16"+
    "\20\0\23\16\1\355\4\16\5\0\2\16\1\0\2\16"+
    "\1\126\10\0\24\16\20\0\22\16\1\345\1\0\4\16"+
    "\5\0\2\16\1\0\2\16\1\126\10\0\24\16\20\0"+
    "\23\16\1\356\4\16\5\0\2\16\1\0\2\16\1\126"+
    "\10\0\24\16\20\0\6\16\1\357\14\16\1\0\4\16"+
    "\5\0\2\16\1\0\2\16\1\126\10\0\24\16\20\0"+
    "\5\16\1\360\15\16\1\0\4\16\5\0\2\16\1\0"+
    "\2\16\1\126\10\0\15\16\1\361\6\16\20\0\23\16"+
    "\1\0\4\16\3\0\1\362\137\0\1\363\77\0\2\16"+
    "\1\0\2\16\1\126\10\0\7\16\1\364\14\16\20\0"+
    "\23\16\1\0\4\16\5\0\2\16\1\0\2\16\1\126"+
    "\10\0\16\16\1\365\5\16\20\0\23\16\1\0\4\16"+
    "\5\0\2\16\1\0\2\16\1\126\10\0\7\16\1\366"+
    "\14\16\20\0\23\16\1\0\4\16\40\0\1\367\63\0"+
    "\2\341\1\0\2\341\11\0\24\341\20\0\23\341\1\0"+
    "\4\341\5\0\2\16\1\0\2\16\1\126\10\0\16\16"+
    "\1\370\5\16\20\0\23\16\1\0\4\16\40\0\1\371"+
    "\63\0\2\16\1\0\2\16\1\126\10\0\3\16\1\372"+
    "\20\16\20\0\23\16\1\0\4\16\41\0\1\373\161\0"+
    "\1\374\17\0\2\16\1\0\2\16\1\126\10\0\22\16"+
    "\1\375\1\16\20\0\23\16\1\0\4\16\74\0\1\371"+
    "\124\0\1\376\104\0\1\377\122\0\1\u0100\27\0\2\16"+
    "\1\0\2\16\1\126\10\0\24\16\20\0\1\u0101\22\16"+
    "\1\0\4\16\5\0\2\16\1\0\2\16\1\126\10\0"+
    "\24\16\20\0\12\16\1\u0102\10\16\1\0\4\16\5\0"+
    "\2\16\1\0\2\16\1\126\10\0\11\16\1\u0103\12\16"+
    "\20\0\23\16\1\0\4\16\25\0\1\u0104\76\0\2\16"+
    "\1\0\2\16\1\126\10\0\16\16\1\u0105\5\16\20\0"+
    "\23\16\1\0\4\16\5\0\2\16\1\0\2\16\1\126"+
    "\10\0\14\16\1\u0106\7\16\20\0\23\16\1\0\4\16"+
    "\5\0\2\16\1\0\2\16\1\126\10\0\17\16\1\u0107"+
    "\4\16\20\0\23\16\1\0\4\16\45\0\1\u0108\56\0"+
    "\2\16\1\0\2\16\1\126\10\0\15\16\1\u0109\6\16"+
    "\20\0\23\16\1\0\4\16\42\0\1\u010a\113\0\1\u010b"+
    "\167\0\1\u010c\100\0\1\u010d\141\0\1\u010e\6\0\2\16"+
    "\1\0\2\16\1\126\10\0\24\16\20\0\1\16\1\u010f"+
    "\21\16\1\0\4\16\5\0\2\16\1\0\2\16\1\126"+
    "\10\0\24\16\20\0\7\16\1\u0110\13\16\1\0\4\16"+
    "\5\0\2\16\1\0\2\16\1\126\10\0\6\16\1\u0111"+
    "\15\16\20\0\23\16\1\0\4\16\26\0\1\u0112\75\0"+
    "\2\16\1\0\2\16\1\126\10\0\20\16\1\u0113\3\16"+
    "\20\0\23\16\1\0\4\16\5\0\2\16\1\0\2\16"+
    "\1\126\10\0\11\16\1\u0114\12\16\20\0\23\16\1\0"+
    "\4\16\5\0\2\16\1\0\2\16\1\126\10\0\16\16"+
    "\1\u0115\5\16\20\0\23\16\1\0\4\16\30\0\1\u0116"+
    "\126\0\1\u0117\106\0\1\u0118\163\0\1\u0119\115\0\1\u011a"+
    "\117\0\1\u011b\26\0\2\16\1\0\2\16\1\126\10\0"+
    "\24\16\20\0\20\16\1\u0113\2\16\1\0\4\16\5\0"+
    "\2\16\1\0\2\16\1\126\10\0\24\16\20\0\23\16"+
    "\1\u011c\4\16\5\0\2\16\1\0\2\16\1\126\10\0"+
    "\24\16\20\0\23\16\1\u011d\4\16\27\0\1\u011e\130\0"+
    "\1\u011f\167\0\1\u0120\32\0\1\u0121\201\0\1\371\117\0"+
    "\1\u0122\74\0\1\u0123\122\0\1\u0124\62\0\1\u0125\106\0"+
    "\1\u0126\200\0\1\u0127\27\0\1\u0128\136\0\1\371\166\0"+
    "\1\u0129\115\0\1\u012a\121\0\1\u012b\46\0\1\u012c\102\0"+
    "\1\u012d\127\0\1\u012e\116\0\1\u012f\146\0\1\u0130\116\0"+
    "\1\u0131\121\0\1\u0132\51\0\1\u0133\120\0\1\u0134\115\0"+
    "\1\u0135\126\0\1\u0136\145\0\1\u0137\124\0\1\u0138\110\0"+
    "\1\u0139\67\0\1\u013a\105\0\1\u013b\200\0\1\u013c\44\0"+
    "\1\u013d\152\0\1\u013e\134\0\1\u013f\116\0\1\u0140\116\0"+
    "\1\u0141\37\0\1\u0142\117\0\1\u0143\112\0\1\u0144\163\0"+
    "\1\u0145\122\0\1\u0146\107\0\1\u0147\66\0\1\u0148\102\0"+
    "\1\u0149\174\0\1\u014a\44\0\1\u014b\153\0\1\u014c\131\0"+
    "\1\u014d\112\0\1\u014e\51\0\1\u014f\121\0\1\u0150\121\0"+
    "\1\u0151\120\0\1\u0152\145\0\1\u0152\136\0\1\u0153\120\0"+
    "\1\u0154\116\0\1\u0155\4\0\16\u0150\1\u0156\1\u0157\77\u0150"+
    "\30\0\1\u0158\163\0\1\u0159\122\0\1\u015a\51\0\1\u015b"+
    "\101\0\1\u0157\125\0\1\u015c\201\0\1\u015d\107\0\1\u015e"+
    "\120\0\1\u015f\124\0\1\u0160\116\0\1\u0161\114\0\1\u0162"+
    "\45\0\1\u0163\117\0\1\u0164\152\0\1\u0165\117\0\1\u0166"+
    "\51\0\1\u0167\130\0\1\u0168\146\0\1\u0168\135\0\1\u0169"+
    "\33\0\1\u016a\202\0\1\u016b\116\0\1\u016c\100\0\1\u016d"+
    "\62\0\1\u016e\150\0\1\u016f\66\0\1\u016f\54\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23384];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\1\0\1\11\4\1\1\3\3\1\4\11"+
    "\2\1\17\3\1\1\11\11\2\1\3\11\1\1\16\3"+
    "\2\1\1\3\2\1\2\11\1\1\2\3\1\1\1\0"+
    "\5\11\1\15\1\1\2\0\2\11\30\3\5\11\22\3"+
    "\1\0\1\5\1\0\1\5\5\0\2\1\1\0\13\3"+
    "\1\0\13\3\1\0\11\3\2\0\1\11\1\0\1\1"+
    "\1\11\2\0\5\3\1\0\1\3\1\0\5\3\1\0"+
    "\2\3\2\0\6\3\1\0\1\15\1\11\1\0\4\3"+
    "\1\0\1\5\1\3\1\0\3\3\2\0\2\3\4\0"+
    "\3\3\1\15\1\0\3\3\1\0\1\3\1\11\1\3"+
    "\2\0\1\3\3\0\3\3\1\0\3\3\1\0\1\3"+
    "\5\0\3\3\1\0\3\3\11\0\1\1\3\0\1\1"+
    "\25\0\2\1\27\0\1\11\3\0\1\1\1\11\20\0"+
    "\1\11\6\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    CfscriptLexerConfiguration myCurrentConfiguration = new CfscriptLexerConfiguration();

  public class CfscriptLexerConfiguration {
      public int mySharpCounter = 0;
      public int myCommentCounter = 0;
      public Stack<Integer> myReturnStack = new Stack<Integer>();

      public CfscriptLexerConfiguration() {}

      public CfscriptLexerConfiguration(int sharpCounter, int commentCounter,
                                        Stack<Integer> returnStack) {
          mySharpCounter = sharpCounter;
          myCommentCounter = commentCounter;
          myReturnStack = returnStack;
      }

      public void reset() {
          mySharpCounter = 0;
          myCommentCounter = 0;
          myReturnStack.clear();
      }
  }

  public _CfscriptLexer() {
    this((java.io.Reader)null);
  }
  private IElementType startComment(int stateToReturnTo) {
    myCurrentConfiguration.myCommentCounter = 0;
    myCurrentConfiguration.myReturnStack.push(stateToReturnTo);
    myCurrentConfiguration.myCommentCounter++;
    yybegin(COMMENT);
    return CfmlTokenTypes.COMMENT;
  }


  _CfscriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _CfscriptLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1806) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
    myCurrentConfiguration.reset();
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
    myCurrentConfiguration.reset();
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;

      zzWasPushback = false;

      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return CfscriptTokenTypes.MINUS;
          }
        case 89: break;
        case 81: 
          { return CfscriptTokenTypes.RETURN_KEYWORD;
          }
        case 90: break;
        case 68: 
          { return CfscriptTokenTypes.NOT_L;
          }
        case 91: break;
        case 4: 
          { return CfscriptTokenTypes.NOT;
          }
        case 92: break;
        case 79: 
          { return CfscriptTokenTypes.WHILE_KEYWORD;
          }
        case 93: break;
        case 32: 
          { yybegin(YYINITIAL); return CfscriptTokenTypes.DOUBLE_QUOTE_CLOSER;
          }
        case 94: break;
        case 3: 
          { return CfscriptTokenTypes.LT;
          }
        case 95: break;
        case 84: 
          { return CfscriptTokenTypes.CONTAINS_L;
          }
        case 96: break;
        case 86: 
          { return CfscriptTokenTypes.FUNCTION_KEYWORD;
          }
        case 97: break;
        case 31: 
          { yybegin(DOUBLEQUOTE_CLOSER); return CfscriptTokenTypes.STRING_TEXT;
          }
        case 98: break;
        case 15: 
          { return CfscriptTokenTypes.MUL;
          }
        case 99: break;
        case 61: 
          { return CfscriptTokenTypes.COMMENT;
          }
        case 100: break;
        case 41: 
          { return CfscriptTokenTypes.GTE;
          }
        case 101: break;
        case 48: 
          { return CfscriptTokenTypes.IF_KEYWORD;
          }
        case 102: break;
        case 58: 
          { return CfscriptTokenTypes.GT_L;
          }
        case 103: break;
        case 65: 
          { return CfscriptTokenTypes.NOT_XOR_L;
          }
        case 104: break;
        case 36: 
          { myCurrentConfiguration.myReturnStack.push(SINGLE_QUOTED_STRING);
    myCurrentConfiguration.mySharpCounter++;
    yybegin(YYINITIAL);
    return CfscriptTokenTypes.OPENSHARP;
          }
        case 105: break;
        case 83: 
          { return CfscriptTokenTypes.DEFAULT_KEYWORD;
          }
        case 106: break;
        case 47: 
          { return CfscriptTokenTypes.LT_L;
          }
        case 107: break;
        case 43: 
          { return CfscriptTokenTypes.DOUBLE;
          }
        case 108: break;
        case 55: 
          { return CfscriptTokenTypes.ADD_EQ;
          }
        case 109: break;
        case 71: 
          { yybegin(myCurrentConfiguration.myReturnStack.pop()); return CfmlTokenTypes.COMMENT;
          }
        case 110: break;
        case 6: 
          { return CfscriptTokenTypes.GT;
          }
        case 111: break;
        case 45: 
          { return CfscriptTokenTypes.MUL_EQ;
          }
        case 112: break;
        case 40: 
          { return CfscriptTokenTypes.MINUS_EQ;
          }
        case 113: break;
        case 42: 
          { if (CfmlUtil.myVariableScopes.contains(yytext().toString().toLowerCase())) {
        return CfscriptTokenTypes.SCOPE_KEYWORD;
    } else {
        return CfscriptTokenTypes.IDENTIFIER;
    }
          }
        case 114: break;
        case 72: 
          { return CfscriptTokenTypes.CASE_KEYWORD;
          }
        case 115: break;
        case 7: 
          { return CfscriptTokenTypes.IDENTIFIER;
          }
        case 116: break;
        case 37: 
          { return CfscriptTokenTypes.LTE;
          }
        case 117: break;
        case 10: 
          { return CfscriptTokenTypes.POINT;
          }
        case 118: break;
        case 74: 
          { myCurrentConfiguration.myCommentCounter--;
    if (myCurrentConfiguration.myCommentCounter == 0) {
        yybegin(COMMENTEND);
    }
    return CfmlTokenTypes.COMMENT;
          }
        case 119: break;
        case 57: 
          { return CfscriptTokenTypes.OR;
          }
        case 120: break;
        case 62: 
          { return CfscriptTokenTypes.FOR_KEYWORD;
          }
        case 121: break;
        case 9: 
          { return CfscriptTokenTypes.INTEGER;
          }
        case 122: break;
        case 76: 
          { return CfscriptTokenTypes.CATCH_KEYWORD;
          }
        case 123: break;
        case 34: 
          { yybegin(SINGLEQUOTE_CLOSER); return CfscriptTokenTypes.STRING_TEXT;
          }
        case 124: break;
        case 16: 
          { return CfscriptTokenTypes.CONTCAT;
          }
        case 125: break;
        case 53: 
          { return CfscriptTokenTypes.AND;
          }
        case 126: break;
        case 23: 
          { return CfscriptTokenTypes.R_CURLYBRAKET;
          }
        case 127: break;
        case 75: 
          { return startComment(YYINITIAL);
          }
        case 128: break;
        case 50: 
          { return CfscriptTokenTypes.EQ_L;
          }
        case 129: break;
        case 69: 
          { return CfscriptTokenTypes.MOD_L;
          }
        case 130: break;
        case 54: 
          { return CfscriptTokenTypes.EQEQ;
          }
        case 131: break;
        case 82: 
          { return CfscriptTokenTypes.SWITCH_KEYWORD;
          }
        case 132: break;
        case 17: 
          { return CfscriptTokenTypes.COMMA;
          }
        case 133: break;
        case 18: 
          { return CfscriptTokenTypes.L_BRACKET;
          }
        case 134: break;
        case 80: 
          { myCurrentConfiguration.myCommentCounter++; return CfmlTokenTypes.COMMENT;
          }
        case 135: break;
        case 22: 
          { return CfscriptTokenTypes.L_CURLYBRAKET;
          }
        case 136: break;
        case 44: 
          { return CfscriptTokenTypes.DEV_EQ;
          }
        case 137: break;
        case 66: 
          { return CfscriptTokenTypes.TRY_KEYWORD;
          }
        case 138: break;
        case 33: 
          { myCurrentConfiguration.myReturnStack.push(DOUBLE_QUOTED_STRING);
    myCurrentConfiguration.mySharpCounter++;
    yybegin(YYINITIAL);
    return CfscriptTokenTypes.OPENSHARP;
          }
        case 139: break;
        case 64: 
          { return CfscriptTokenTypes.IMP_L;
          }
        case 140: break;
        case 24: 
          { return CfscriptTokenTypes.SEMICOLON;
          }
        case 141: break;
        case 70: 
          { return CfscriptTokenTypes.XOR_L;
          }
        case 142: break;
        case 8: 
          { return CfscriptTokenTypes.WHITE_SPACE;
          }
        case 143: break;
        case 11: 
          { yybegin(DOUBLE_QUOTED_STRING);
    return CfscriptTokenTypes.DOUBLE_QUOTE;
          }
        case 144: break;
        case 77: 
          { return CfscriptTokenTypes.VAR_KEYWORD;
          }
        case 145: break;
        case 52: 
          { return CfscriptTokenTypes.OR_L;
          }
        case 146: break;
        case 35: 
          { yybegin(YYINITIAL); return CfscriptTokenTypes.SINGLE_QUOTE_CLOSER;
          }
        case 147: break;
        case 26: 
          { return CfscriptTokenTypes.ASSIGN;
          }
        case 148: break;
        case 12: 
          { yybegin(SINGLE_QUOTED_STRING);
    return CfscriptTokenTypes.SINGLE_QUOTE;
          }
        case 149: break;
        case 30: 
          { return CfscriptTokenTypes.POW;
          }
        case 150: break;
        case 28: 
          { return CfscriptTokenTypes.MOD;
          }
        case 151: break;
        case 49: 
          { return CfscriptTokenTypes.IN_L;
          }
        case 152: break;
        case 60: 
          { return CfscriptTokenTypes.STRING_TEXT;
          }
        case 153: break;
        case 88: 
          { return CfmlTokenTypes.VAR_ANNOTATION;
          }
        case 154: break;
        case 27: 
          { return CfscriptTokenTypes.ADD;
          }
        case 155: break;
        case 73: 
          { return CfscriptTokenTypes.ELSE_KEYWORD;
          }
        case 156: break;
        case 29: 
          { return CfscriptTokenTypes.INT_DEV;
          }
        case 157: break;
        case 2: 
          { return CfscriptTokenTypes.BAD_CHARACTER;
          }
        case 158: break;
        case 19: 
          { return CfscriptTokenTypes.R_BRACKET;
          }
        case 159: break;
        case 56: 
          { return CfscriptTokenTypes.INC;
          }
        case 160: break;
        case 20: 
          { return CfscriptTokenTypes.L_SQUAREBRAKET;
          }
        case 161: break;
        case 1: 
          { return CfmlTokenTypes.COMMENT;
          }
        case 162: break;
        case 87: 
          { return CfscriptTokenTypes.NOT_CONTAINS_L;
          }
        case 163: break;
        case 63: 
          { return CfscriptTokenTypes.AND_L;
          }
        case 164: break;
        case 59: 
          { return CfscriptTokenTypes.GE_L;
          }
        case 165: break;
        case 14: 
          { return CfscriptTokenTypes.DEV;
          }
        case 166: break;
        case 78: 
          { return CfscriptTokenTypes.BREAK_KEYWORD;
          }
        case 167: break;
        case 21: 
          { return CfscriptTokenTypes.R_SQUAREBRAKET;
          }
        case 168: break;
        case 46: 
          { return CfscriptTokenTypes.LE_L;
          }
        case 169: break;
        case 85: 
          { return CfscriptTokenTypes.CONTINUE_KEYWORD;
          }
        case 170: break;
        case 67: 
          { return CfscriptTokenTypes.NEQ_L;
          }
        case 171: break;
        case 38: 
          { return CfscriptTokenTypes.NEQ;
          }
        case 172: break;
        case 39: 
          { return CfscriptTokenTypes.DEC;
          }
        case 173: break;
        case 51: 
          { return CfscriptTokenTypes.DO_KEYWORD;
          }
        case 174: break;
        case 25: 
          { return CfscriptTokenTypes.DOTDOT;
          }
        case 175: break;
        case 13: 
          { if (myCurrentConfiguration.mySharpCounter == 0) {
        myCurrentConfiguration.myReturnStack.push(YYINITIAL);
        myCurrentConfiguration.mySharpCounter = 1;
        return CfscriptTokenTypes.OPENSHARP;
    }
    myCurrentConfiguration.mySharpCounter--;
    yybegin(myCurrentConfiguration.myReturnStack.pop());
    return CfscriptTokenTypes.CLOSESHARP;
          }
        case 176: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
