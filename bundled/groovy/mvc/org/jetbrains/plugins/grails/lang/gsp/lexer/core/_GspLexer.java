/* The following code was generated by JFlex 1.4.1 on 7/4/08 2:11 PM */

/*
 * Copyright 2000-2007 JetBrains s.r.o.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.plugins.grails.lang.gsp.lexer.core;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.plugins.grails.lang.gsp.lexer.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 7/4/08 2:11 PM from the specification file
 * <tt>gsp.flex</tt>
 */
public class _GspLexer implements FlexLexer, GspTokenTypesEx {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int JSP_COMMENT = 27;
  public static final int MAP_VAL_SQ = 21;
  public static final int IN_GTAG_START = 11;
  public static final int GEXPR_IN_VALUE_DQ = 18;
  public static final int IN_GSCRIPT = 8;
  public static final int GEXPR_IN_VALUE_SQ = 19;
  public static final int IN_GEXPR = 7;
  public static final int IN_GDIRECT = 9;
  public static final int IN_J_DECLAR = 5;
  public static final int ATTR_VALUE_SQ_NOT_MAP = 25;
  public static final int IN_GTAG_END = 12;
  public static final int MAP_SQ_END = 23;
  public static final int INJECTION_START = 1;
  public static final int MAP_DQ_END = 22;
  public static final int IN_J_SCRIPT = 2;
  public static final int IN_JSCRIPT_END = 3;
  public static final int ATTR_VALUE_DQ = 16;
  public static final int ATTR_VALUE_DQ_NOT_MAP = 24;
  public static final int IN_GDECLAR = 10;
  public static final int IN_J_DIRECT = 4;
  public static final int ATTR_VALUE_SQ = 17;
  public static final int IN_J_EXPR = 6;
  public static final int YYINITIAL = 0;
  public static final int MAP_VAL_DQ = 20;
  public static final int GSP_COMMENT = 26;
  public static final int ATTR = 14;
  public static final int ATTR_LIST = 13;
  public static final int ATTR_VALUE = 15;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\13\1\0\1\13\1\13\22\0\1\13\1\10\1\23"+
    "\1\0\1\11\1\2\1\0\1\24\5\0\1\3\1\0\1\22\12\15"+
    "\1\16\1\0\1\1\1\6\1\5\1\0\1\7\32\14\1\25\1\21"+
    "\2\0\1\20\1\0\32\14\1\4\1\0\1\12\44\0\4\17\4\0"+
    "\1\17\12\0\1\17\4\0\1\17\5\0\27\17\1\0\37\17\1\0"+
    "\u013f\17\31\0\162\17\4\0\14\17\16\0\5\17\11\0\1\17\213\0"+
    "\1\17\13\0\1\17\1\0\3\17\1\0\1\17\1\0\24\17\1\0"+
    "\54\17\1\0\46\17\1\0\5\17\4\0\202\17\10\0\105\17\1\0"+
    "\46\17\2\0\2\17\6\0\20\17\41\0\46\17\2\0\1\17\7\0"+
    "\47\17\110\0\33\17\5\0\3\17\56\0\32\17\5\0\13\17\43\0"+
    "\2\17\1\0\143\17\1\0\1\17\17\0\2\17\7\0\2\17\12\0"+
    "\3\17\2\0\1\17\20\0\1\17\1\0\36\17\35\0\3\17\60\0"+
    "\46\17\13\0\1\17\u0152\0\66\17\3\0\1\17\22\0\1\17\7\0"+
    "\12\17\43\0\10\17\2\0\2\17\2\0\26\17\1\0\7\17\1\0"+
    "\1\17\3\0\4\17\3\0\1\17\36\0\2\17\1\0\3\17\16\0"+
    "\4\17\21\0\6\17\4\0\2\17\2\0\26\17\1\0\7\17\1\0"+
    "\2\17\1\0\2\17\1\0\2\17\37\0\4\17\1\0\1\17\23\0"+
    "\3\17\20\0\11\17\1\0\3\17\1\0\26\17\1\0\7\17\1\0"+
    "\2\17\1\0\5\17\3\0\1\17\22\0\1\17\17\0\2\17\17\0"+
    "\1\17\23\0\10\17\2\0\2\17\2\0\26\17\1\0\7\17\1\0"+
    "\2\17\1\0\5\17\3\0\1\17\36\0\2\17\1\0\3\17\17\0"+
    "\1\17\21\0\1\17\1\0\6\17\3\0\3\17\1\0\4\17\3\0"+
    "\2\17\1\0\1\17\1\0\2\17\3\0\2\17\3\0\3\17\3\0"+
    "\10\17\1\0\3\17\77\0\1\17\13\0\10\17\1\0\3\17\1\0"+
    "\27\17\1\0\12\17\1\0\5\17\46\0\2\17\43\0\10\17\1\0"+
    "\3\17\1\0\27\17\1\0\12\17\1\0\5\17\3\0\1\17\40\0"+
    "\1\17\1\0\2\17\43\0\10\17\1\0\3\17\1\0\27\17\1\0"+
    "\20\17\46\0\2\17\43\0\22\17\3\0\30\17\1\0\11\17\1\0"+
    "\1\17\2\0\7\17\72\0\60\17\1\0\2\17\13\0\10\17\72\0"+
    "\2\17\1\0\1\17\2\0\2\17\1\0\1\17\2\0\1\17\6\0"+
    "\4\17\1\0\7\17\1\0\3\17\1\0\1\17\1\0\1\17\2\0"+
    "\2\17\1\0\4\17\1\0\2\17\11\0\1\17\2\0\5\17\1\0"+
    "\1\17\25\0\2\17\42\0\1\17\77\0\10\17\1\0\42\17\35\0"+
    "\4\17\164\0\42\17\1\0\5\17\1\0\2\17\45\0\6\17\112\0"+
    "\46\17\12\0\51\17\7\0\132\17\5\0\104\17\5\0\122\17\6\0"+
    "\7\17\1\0\77\17\1\0\1\17\1\0\4\17\2\0\7\17\1\0"+
    "\1\17\1\0\4\17\2\0\47\17\1\0\1\17\1\0\4\17\2\0"+
    "\37\17\1\0\1\17\1\0\4\17\2\0\7\17\1\0\1\17\1\0"+
    "\4\17\2\0\7\17\1\0\7\17\1\0\27\17\1\0\37\17\1\0"+
    "\1\17\1\0\4\17\2\0\7\17\1\0\47\17\1\0\23\17\105\0"+
    "\125\17\14\0\u026c\17\2\0\10\17\12\0\32\17\5\0\113\17\3\0"+
    "\3\17\17\0\15\17\1\0\4\17\16\0\22\17\16\0\22\17\16\0"+
    "\15\17\1\0\3\17\17\0\64\17\43\0\1\17\3\0\2\17\103\0"+
    "\130\17\10\0\51\17\127\0\35\17\63\0\36\17\2\0\5\17\u038b\0"+
    "\154\17\224\0\234\17\4\0\132\17\6\0\26\17\2\0\6\17\2\0"+
    "\46\17\2\0\6\17\2\0\10\17\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\1\0\37\17\2\0\65\17\1\0\7\17\1\0\1\17\3\0"+
    "\3\17\1\0\7\17\3\0\4\17\2\0\6\17\4\0\15\17\5\0"+
    "\3\17\1\0\7\17\102\0\2\17\23\0\1\17\34\0\1\17\15\0"+
    "\1\17\40\0\22\17\120\0\1\17\4\0\1\17\2\0\12\17\1\0"+
    "\1\17\3\0\5\17\6\0\1\17\1\0\1\17\1\0\1\17\1\0"+
    "\4\17\1\0\3\17\1\0\7\17\3\0\3\17\5\0\5\17\26\0"+
    "\44\17\u0e81\0\3\17\31\0\11\17\7\0\5\17\2\0\5\17\4\0"+
    "\126\17\6\0\3\17\1\0\137\17\5\0\50\17\4\0\136\17\21\0"+
    "\30\17\70\0\20\17\u0200\0\u19b6\17\112\0\u51a6\17\132\0\u048d\17\u0773\0"+
    "\u2ba4\17\u215c\0\u012e\17\2\0\73\17\225\0\7\17\14\0\5\17\5\0"+
    "\1\17\1\0\12\17\1\0\15\17\1\0\5\17\1\0\1\17\1\0"+
    "\2\17\1\0\2\17\1\0\154\17\41\0\u016b\17\22\0\100\17\2\0"+
    "\66\17\50\0\15\17\66\0\2\17\30\0\3\17\31\0\1\17\6\0"+
    "\5\17\1\0\207\17\7\0\1\17\34\0\32\17\4\0\1\17\1\0"+
    "\32\17\12\0\132\17\3\0\6\17\2\0\6\17\2\0\6\17\2\0"+
    "\3\17\3\0\2\17\3\0\2\17\31\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\26\0\2\1\4\0\5\2\5\0\2\3\2\4\2\5"+
    "\2\6\1\7\1\10\1\3\1\11\1\5\2\12\1\13"+
    "\1\12\2\14\1\15\1\16\1\17\1\14\1\20\1\21"+
    "\1\22\1\20\2\23\1\24\1\25\4\1\1\26\1\27"+
    "\2\1\1\30\1\31\1\32\3\33\1\34\1\1\2\35"+
    "\2\36\1\37\2\0\2\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\0\1\52"+
    "\1\0\1\53\2\21\1\54\1\55\1\0\1\56\2\0"+
    "\1\57\1\0\1\60\3\0\1\61\2\0\1\62\1\63"+
    "\1\64\1\52\1\53\2\0\1\65\1\61\1\66\1\67"+
    "\1\70\1\71\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\26\0\54\0\102\0\130\0\156\0\204\0\232"+
    "\0\260\0\306\0\334\0\362\0\u0108\0\u011e\0\u0134\0\u014a"+
    "\0\u0160\0\u0176\0\u018c\0\u01a2\0\u01b8\0\u01ce\0\u01e4\0\u01fa"+
    "\0\u0210\0\u0226\0\u023c\0\u0252\0\102\0\u0268\0\u027e\0\u0294"+
    "\0\u02aa\0\u02c0\0\u02d6\0\u02ec\0\u0302\0\u0318\0\102\0\u032e"+
    "\0\102\0\u0344\0\102\0\u035a\0\102\0\u0370\0\102\0\102"+
    "\0\u0386\0\102\0\u039c\0\102\0\u03b2\0\102\0\u03c8\0\102"+
    "\0\u03de\0\102\0\u03f4\0\u040a\0\u0420\0\102\0\u0436\0\102"+
    "\0\u0420\0\102\0\u0420\0\102\0\102\0\102\0\u044c\0\u0462"+
    "\0\u0478\0\102\0\102\0\u048e\0\u04a4\0\102\0\102\0\102"+
    "\0\102\0\u04ba\0\u04d0\0\102\0\u04e6\0\102\0\u04fc\0\102"+
    "\0\u0512\0\u0528\0\u053e\0\u0554\0\u056a\0\102\0\u0580\0\102"+
    "\0\102\0\102\0\102\0\102\0\102\0\102\0\102\0\102"+
    "\0\u03b2\0\u0596\0\u03c8\0\u05ac\0\102\0\u05c2\0\102\0\102"+
    "\0\u0462\0\102\0\u04a4\0\u04ba\0\102\0\u04d0\0\102\0\u05d8"+
    "\0\u05ee\0\u0604\0\u061a\0\u0630\0\u0646\0\102\0\102\0\102"+
    "\0\u065c\0\u0672\0\u0688\0\u069e\0\102\0\u06b4\0\u06ca\0\102"+
    "\0\102\0\102\0\u06e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\35\1\36\1\37\4\35\3\40\7\35\1\41\4\35"+
    "\1\0\1\42\1\43\4\0\1\44\1\45\1\46\14\0"+
    "\2\47\1\50\23\47\26\0\2\51\1\52\23\51\2\53"+
    "\1\54\23\53\2\55\1\56\27\55\1\57\5\55\1\60"+
    "\13\55\12\47\1\61\13\47\12\51\1\62\13\51\12\53"+
    "\1\63\13\53\14\64\1\65\16\64\1\66\6\64\1\67"+
    "\11\64\1\70\1\71\3\70\1\72\5\70\1\73\1\74"+
    "\2\70\2\74\1\70\1\75\3\70\1\76\1\77\3\76"+
    "\1\72\1\100\4\76\1\73\6\76\1\101\3\76\1\102"+
    "\1\77\3\102\1\72\5\102\1\73\6\102\1\103\1\104"+
    "\1\105\1\102\11\106\1\107\1\106\1\110\5\106\1\111"+
    "\1\106\1\112\1\106\1\113\11\106\1\114\1\106\1\115"+
    "\5\106\1\111\2\106\1\112\1\116\4\55\1\57\5\55"+
    "\1\117\17\55\1\57\5\55\1\120\13\55\25\121\1\122"+
    "\25\121\1\123\13\124\1\125\7\124\1\112\15\124\1\125"+
    "\10\124\1\112\1\124\11\106\1\107\11\106\1\112\13\106"+
    "\1\107\12\106\1\112\1\106\3\126\1\127\22\126\3\130"+
    "\1\131\22\130\2\0\1\132\11\0\1\133\5\0\1\134"+
    "\7\0\1\135\25\0\1\136\32\0\1\35\16\0\1\137"+
    "\27\0\1\140\25\0\1\141\25\0\1\142\25\0\1\143"+
    "\26\0\1\144\25\0\1\62\25\0\1\145\25\0\1\146"+
    "\22\0\1\147\33\0\1\150\31\0\2\151\1\152\1\0"+
    "\1\151\21\0\2\153\1\154\1\0\1\153\5\0\2\155"+
    "\1\0\17\155\1\156\3\155\13\0\1\73\26\0\2\74"+
    "\1\0\2\74\12\0\1\157\42\0\1\155\7\0\1\160"+
    "\34\0\1\161\11\0\1\113\11\0\1\106\20\0\1\162"+
    "\34\0\1\163\11\0\1\116\23\164\1\165\2\164\24\166"+
    "\1\167\1\166\13\0\1\125\15\0\1\170\25\0\1\171"+
    "\25\0\1\172\36\0\2\133\1\173\1\0\1\133\21\0"+
    "\1\174\14\0\1\175\30\0\1\176\1\177\1\200\31\0"+
    "\1\201\25\0\1\202\11\0\2\155\1\0\23\155\12\0"+
    "\1\203\15\0\1\204\26\0\1\205\36\0\1\206\25\0"+
    "\2\174\1\207\1\0\1\174\10\0\1\210\36\0\2\201"+
    "\2\0\1\201\21\0\2\202\2\0\1\202\7\0\1\211"+
    "\30\0\1\212\34\0\2\206\2\0\1\206\21\0\1\213"+
    "\25\0\2\213\2\0\1\213\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1782];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\10\22\0\2\1\4\0\1\11\4\1\5\0"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\2\11\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\3\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\3\11\3\1\2\11\2\1\4\11\2\1"+
    "\1\11\1\1\1\11\1\1\1\11\2\1\2\0\1\1"+
    "\1\11\1\1\11\11\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\2\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\3\0\1\1\2\0\3\11\2\1\2\0\1\11\2\1"+
    "\3\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int curlyCount = 0; 


  public _GspLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _GspLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  public void reset(CharSequence buffer, int initialState){
    reset(buffer, 0, buffer.length(), initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { return GSP_WHITE_SPACE;
          }
        case 58: break;
        case 46: 
          { curlyCount = 0; yybegin(GEXPR_IN_VALUE_SQ); return GEXPR_BEGIN;
          }
        case 59: break;
        case 36: 
          { curlyCount = 0;
                                               yybegin (IN_GEXPR);
                                               return GEXPR_BEGIN;
          }
        case 60: break;
        case 57: 
          { yybegin(YYINITIAL); return JSP_STYLE_COMMENT;
          }
        case 61: break;
        case 44: 
          { yybegin(YYINITIAL);
                                                  return GTAG_START_TAG_END;
          }
        case 62: break;
        case 25: 
          { if (curlyCount > 0) {
                                                    curlyCount--;
                                                    return GROOVY_EXPR_CODE;
                                                  } else {
                                                    curlyCount = 0;
                                                    yybegin(ATTR_VALUE_DQ_NOT_MAP);
                                                    return GEXPR_END;
                                                  }
          }
        case 63: break;
        case 7: 
          { curlyCount++; return GROOVY_EXPR_CODE;
          }
        case 64: break;
        case 48: 
          { yypushback(1);
                                                  while (yytext().toString().substring(yytext().length()-1).equals(" ") ||
                                                         yytext().toString().substring(yytext().length()-1).equals("\n") ||
                                                         yytext().toString().substring(yytext().length()-1).equals("\r") ||
                                                         yytext().toString().substring(yytext().length()-1).equals("\t") ) {
                                                    yypushback(1);
                                                  }
                                                  yybegin(MAP_SQ_END); return GSP_MAP_ATTR_VALUE;
          }
        case 65: break;
        case 29: 
          { return GSP_STYLE_COMMENT;
          }
        case 66: break;
        case 54: 
          { yypushback(yytext().length()-2);
                                              yybegin(IN_GTAG_END);
                                              return(GTAG_END_TAG_START);
          }
        case 67: break;
        case 16: 
          { yypushback(yytext().length()); yybegin(ATTR_LIST);
          }
        case 68: break;
        case 1: 
          { return GSP_ATTRIBUTE_VALUE_TOKEN;
          }
        case 69: break;
        case 2: 
          { return GSP_TEMPLATE_DATA;
          }
        case 70: break;
        case 50: 
          { yybegin (IN_J_EXPR);
                                               return JEXPR_BEGIN;
          }
        case 71: break;
        case 38: 
          { yybegin(YYINITIAL); return JDECLAR_END;
          }
        case 72: break;
        case 33: 
          { yybegin (IN_GSCRIPT);
                                               return GSCRIPT_BEGIN;
          }
        case 73: break;
        case 43: 
          { return GSP_TAG_NAME;
          }
        case 74: break;
        case 17: 
          { yypushback(yytext().length()); yybegin(YYINITIAL);
          }
        case 75: break;
        case 32: 
          { yybegin (IN_J_SCRIPT);
                                               return JSCRIPT_BEGIN;
          }
        case 76: break;
        case 24: 
          { yypushback(1); yybegin(MAP_VAL_SQ); return GSP_ATTRIBUTE_VALUE_TOKEN;
          }
        case 77: break;
        case 45: 
          { curlyCount = 0; yybegin(GEXPR_IN_VALUE_DQ); return GEXPR_BEGIN;
          }
        case 78: break;
        case 51: 
          { yypushback(3) ;
                                               yybegin (IN_J_DIRECT);
          }
        case 79: break;
        case 22: 
          { yybegin(ATTR_LIST); return GSP_ATTR_VALUE_END_DELIMITER;
          }
        case 80: break;
        case 12: 
          { return GSP_BAD_CHARACTER;
          }
        case 81: break;
        case 8: 
          { if (curlyCount > 0) {
                                                 curlyCount--;
                                                 return GROOVY_EXPR_CODE;
                                               } else {
                                                curlyCount = 0;
                                                yybegin(YYINITIAL);
                                                return GEXPR_END;
                                               }
          }
        case 82: break;
        case 30: 
          { return JSP_STYLE_COMMENT;
          }
        case 83: break;
        case 35: 
          { yybegin (IN_GDECLAR);
                                               return GDECLAR_BEGIN;
          }
        case 84: break;
        case 3: 
          { return GROOVY_CODE;
          }
        case 85: break;
        case 26: 
          { if (curlyCount > 0) {
                                                    curlyCount--;
                                                    return GROOVY_EXPR_CODE;
                                                 } else {
                                                   curlyCount = 0;
                                                   yybegin(ATTR_VALUE_SQ_NOT_MAP);
                                                   return GEXPR_END;
                                                 }
          }
        case 86: break;
        case 55: 
          { yypushback(4);
                                              yybegin(GSP_COMMENT);
          }
        case 87: break;
        case 39: 
          { yybegin(YYINITIAL); return JEXPR_END;
          }
        case 88: break;
        case 52: 
          { yybegin (IN_J_DECLAR);
                                               return JDECLAR_BEGIN;
          }
        case 89: break;
        case 9: 
          { yybegin(YYINITIAL); return GSP_DIRECTIVE;
          }
        case 90: break;
        case 53: 
          { yypushback(4);
                                              yybegin(JSP_COMMENT);
          }
        case 91: break;
        case 21: 
          { yybegin(ATTR_VALUE_SQ); return GSP_ATTR_VALUE_START_DELIMITER;
          }
        case 92: break;
        case 37: 
          { yybegin(YYINITIAL); return JSCRIPT_END;
          }
        case 93: break;
        case 11: 
          { yybegin(YYINITIAL);
                                               return GTAG_TAG_END;
          }
        case 94: break;
        case 4: 
          { return GSP_DIRECTIVE;
          }
        case 95: break;
        case 42: 
          { yybegin(ATTR_LIST);
                                               return GSP_TAG_NAME;
          }
        case 96: break;
        case 41: 
          { yybegin(YYINITIAL); return GDECLAR_END;
          }
        case 97: break;
        case 5: 
          { return GROOVY_DECLARATION;
          }
        case 98: break;
        case 56: 
          { yybegin(YYINITIAL); return GSP_STYLE_COMMENT;
          }
        case 99: break;
        case 28: 
          { yybegin(ATTR_LIST); return GSP_ATTRIBUTE_VALUE_TOKEN;
          }
        case 100: break;
        case 31: 
          { yybegin(INJECTION_START);
                                               yypushback(2);
          }
        case 101: break;
        case 23: 
          { yypushback(1); yybegin(MAP_VAL_DQ); return GSP_ATTRIBUTE_VALUE_TOKEN;
          }
        case 102: break;
        case 18: 
          { yybegin(ATTR_VALUE); return GSP_EQ;
          }
        case 103: break;
        case 49: 
          { yypushback(yytext().length()-1);
                                              yybegin(IN_GTAG_START);
                                              return(GTAG_START_TAG_START);
          }
        case 104: break;
        case 19: 
          { yypushback(yytext().length());  yybegin(ATTR_LIST);
          }
        case 105: break;
        case 6: 
          { return GROOVY_EXPR_CODE;
          }
        case 106: break;
        case 27: 
          { yybegin(ATTR_LIST); return GSP_BAD_CHARACTER;
          }
        case 107: break;
        case 34: 
          { yypushback(2);
                                               yybegin (IN_GDIRECT);
          }
        case 108: break;
        case 10: 
          { yybegin(YYINITIAL);
                                               return GSP_BAD_CHARACTER;
          }
        case 109: break;
        case 13: 
          { yybegin(YYINITIAL);
                                                  return GTAG_TAG_END;
          }
        case 110: break;
        case 47: 
          { yypushback(1);
                                                  while (yytext().toString().substring(yytext().length()-1).equals(" ") ||
                                                         yytext().toString().substring(yytext().length()-1).equals("\n") ||
                                                         yytext().toString().substring(yytext().length()-1).equals("\r") ||
                                                         yytext().toString().substring(yytext().length()-1).equals("\t") ) {
                                                    yypushback(1);
                                                  }
                                                  yybegin(MAP_DQ_END); return GSP_MAP_ATTR_VALUE;
          }
        case 111: break;
        case 15: 
          { yybegin(ATTR);
                                                  return GSP_ATTR_NAME;
          }
        case 112: break;
        case 40: 
          { yybegin (YYINITIAL); return GSCRIPT_END;
          }
        case 113: break;
        case 20: 
          { yybegin(ATTR_VALUE_DQ); return GSP_ATTR_VALUE_START_DELIMITER;
          }
        case 114: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
