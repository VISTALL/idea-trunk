/* The following code was generated by JFlex 1.4.1 on 8/20/09 4:43 PM */

package org.jetbrains.plugins.scala.lang.lexer.core;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypesEx;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 8/20/09 4:43 PM from the specification file
 * <tt>scala.flex</tt>
 */
public class _ScalaCoreLexer implements FlexLexer, ScalaTokenTypesEx {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int COMMON_STATE = 1;
  public static final int YYINITIAL = 0;
  public static final int NEW_LINE_ALLOWED = 2;
  public static final int NEW_LINE_DEPRECATED = 1;
  public static final int PROCESS_NEW_LINE = 3;
  public static final int WAIT_FOR_XML = 4;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\43\1\106\1\45\1\0\1\106\1\103\16\43\4\0\1\106\1\22"+
    "\1\51\1\23\1\42\1\75\1\24\1\50\1\114\1\77\1\24\1\13"+
    "\1\70\1\14\1\10\1\30\1\3\1\32\1\102\2\6\1\36\2\6"+
    "\1\5\1\41\1\25\1\71\1\74\1\72\1\73\1\107\1\26\1\47"+
    "\1\7\1\110\1\17\1\11\1\15\5\42\1\1\6\42\1\62\1\111"+
    "\6\42\1\76\1\27\1\100\1\24\1\44\1\21\1\53\1\34\1\52"+
    "\1\20\1\12\1\16\1\121\1\55\1\64\1\112\1\120\1\2\1\63"+
    "\1\57\1\60\1\115\1\66\1\61\1\56\1\54\1\46\1\117\1\67"+
    "\1\4\1\65\1\116\1\113\1\24\1\101\1\24\6\43\1\104\32\43"+
    "\2\0\4\42\2\24\1\0\1\24\1\42\1\0\1\24\1\43\1\24"+
    "\1\0\1\24\1\24\3\0\1\42\1\24\3\0\1\42\5\0\27\42"+
    "\1\24\37\42\1\24\u013f\42\31\0\162\42\4\0\14\42\16\0\5\42"+
    "\11\0\1\42\21\0\130\43\5\0\23\43\12\0\1\42\13\0\1\42"+
    "\1\0\3\42\1\0\1\42\1\0\24\42\1\0\54\42\1\0\46\42"+
    "\1\24\5\42\4\0\202\42\1\24\4\43\3\0\105\42\1\0\46\42"+
    "\2\0\2\42\6\0\20\42\41\0\46\42\2\0\1\42\7\0\47\42"+
    "\11\0\21\43\1\0\27\43\1\0\3\43\1\0\1\43\1\0\2\43"+
    "\1\0\1\43\13\0\33\42\5\0\3\42\15\0\4\43\2\0\3\24"+
    "\5\0\2\24\6\43\13\0\32\42\5\0\13\42\16\43\7\0\12\43"+
    "\4\0\2\42\1\43\143\42\1\0\1\42\10\43\1\0\6\43\2\42"+
    "\2\43\1\24\4\43\2\42\12\43\3\42\2\24\1\42\17\0\1\43"+
    "\1\42\1\43\36\42\33\43\2\0\3\42\60\0\46\42\13\43\1\42"+
    "\104\0\1\24\u010a\0\3\43\66\42\2\0\1\43\1\42\20\43\2\0"+
    "\1\42\4\43\3\0\12\42\2\43\2\0\12\43\21\0\3\43\1\0"+
    "\10\42\2\0\2\42\2\0\26\42\1\0\7\42\1\0\1\42\3\0"+
    "\4\42\2\0\1\43\1\42\7\43\2\0\2\43\2\0\3\43\11\0"+
    "\1\43\4\0\2\42\1\0\3\42\2\43\2\0\12\43\4\42\6\0"+
    "\1\24\6\0\3\43\1\0\6\42\4\0\2\42\2\0\26\42\1\0"+
    "\7\42\1\0\2\42\1\0\2\42\1\0\2\42\2\0\1\43\1\0"+
    "\5\43\4\0\2\43\2\0\3\43\13\0\4\42\1\0\1\42\7\0"+
    "\14\43\3\42\14\0\3\43\1\0\11\42\1\0\3\42\1\0\26\42"+
    "\1\0\7\42\1\0\2\42\1\0\5\42\2\0\1\43\1\42\10\43"+
    "\1\0\3\43\1\0\3\43\2\0\1\42\17\0\2\42\2\43\2\0"+
    "\12\43\1\0\1\42\17\0\3\43\1\0\10\42\2\0\2\42\2\0"+
    "\26\42\1\0\7\42\1\0\2\42\1\0\5\42\2\0\1\43\1\42"+
    "\6\43\3\0\2\43\2\0\3\43\10\0\2\43\4\0\2\42\1\0"+
    "\3\42\4\0\12\43\1\24\1\42\20\0\1\43\1\42\1\0\6\42"+
    "\3\0\3\42\1\0\4\42\3\0\2\42\1\0\1\42\1\0\2\42"+
    "\3\0\2\42\3\0\3\42\3\0\10\42\1\0\3\42\4\0\5\43"+
    "\3\0\3\43\1\0\4\43\11\0\1\43\17\0\11\43\3\0\6\24"+
    "\1\42\1\24\6\0\3\43\1\0\10\42\1\0\3\42\1\0\27\42"+
    "\1\0\12\42\1\0\5\42\4\0\7\43\1\0\3\43\1\0\4\43"+
    "\7\0\2\43\11\0\2\42\4\0\12\43\17\0\1\24\2\0\2\43"+
    "\1\0\10\42\1\0\3\42\1\0\27\42\1\0\12\42\1\0\5\42"+
    "\2\0\1\43\1\42\7\43\1\0\3\43\1\0\4\43\7\0\2\43"+
    "\7\0\1\42\1\0\2\42\4\0\12\43\1\0\2\24\17\0\2\43"+
    "\1\0\10\42\1\0\3\42\1\0\27\42\1\0\20\42\4\0\6\43"+
    "\2\0\3\43\1\0\4\43\11\0\1\43\10\0\2\42\4\0\12\43"+
    "\11\0\1\24\10\0\2\43\1\0\22\42\3\0\30\42\1\0\11\42"+
    "\1\0\1\42\2\0\7\42\3\0\1\43\4\0\6\43\1\0\1\43"+
    "\1\0\10\43\22\0\2\43\15\0\60\42\1\43\2\42\7\43\4\0"+
    "\10\42\10\43\1\0\12\43\47\0\2\42\1\0\1\42\2\0\2\42"+
    "\1\0\1\42\2\0\1\42\6\0\4\42\1\0\7\42\1\0\3\42"+
    "\1\0\1\42\1\0\1\42\2\0\2\42\1\0\4\42\1\43\2\42"+
    "\6\43\1\0\2\43\1\42\2\0\5\42\1\0\1\42\1\0\6\43"+
    "\2\0\12\43\2\0\2\42\42\0\1\42\3\24\17\0\5\24\2\43"+
    "\6\24\12\43\12\0\1\24\1\43\1\24\1\43\1\24\1\43\4\0"+
    "\2\43\10\42\1\0\42\42\6\0\24\43\1\0\2\43\4\42\4\0"+
    "\10\43\1\0\44\43\1\0\10\24\1\43\6\24\1\0\2\24\60\0"+
    "\42\42\1\0\5\42\1\0\2\42\1\0\7\43\3\0\4\43\6\0"+
    "\12\43\6\0\6\42\4\43\104\0\2\24\46\42\12\0\51\42\7\0"+
    "\132\42\5\0\104\42\5\0\122\42\6\0\7\42\1\0\77\42\1\0"+
    "\1\42\1\0\4\42\2\0\7\42\1\0\1\42\1\0\4\42\2\0"+
    "\47\42\1\0\1\42\1\0\4\42\2\0\37\42\1\0\1\42\1\0"+
    "\4\42\2\0\7\42\1\0\1\42\1\0\4\42\2\0\7\42\1\0"+
    "\7\42\1\0\27\42\1\0\37\42\1\0\1\42\1\0\4\42\2\0"+
    "\7\42\1\0\47\42\1\0\23\42\5\0\1\24\10\0\11\43\36\0"+
    "\12\24\6\0\125\42\14\0\u026c\42\2\0\10\42\12\0\32\42\5\0"+
    "\113\42\3\0\3\42\17\0\15\42\1\0\4\42\3\43\13\0\22\42"+
    "\3\43\13\0\22\42\2\43\14\0\15\42\1\0\3\42\1\0\2\43"+
    "\14\0\64\42\40\43\3\0\1\42\3\0\2\42\1\43\2\0\12\43"+
    "\41\0\3\43\2\0\12\43\6\0\130\42\10\0\51\42\1\43\126\0"+
    "\35\42\3\0\14\43\4\0\14\43\4\0\1\24\5\0\12\43\36\42"+
    "\2\0\5\42\153\0\40\24\u0161\0\12\24\11\0\11\24\u0183\0\154\42"+
    "\1\31\1\33\1\0\1\33\1\0\1\35\1\0\1\35\1\37\1\0"+
    "\1\37\1\0\1\40\1\0\1\40\205\0\234\42\4\0\132\42\6\0"+
    "\26\42\2\0\6\42\2\0\46\42\2\0\6\42\2\0\10\42\1\0"+
    "\1\42\1\0\1\42\1\0\1\42\1\0\37\42\2\0\65\42\1\0"+
    "\7\42\1\0\1\42\3\0\3\42\1\0\7\42\3\0\4\42\2\0"+
    "\6\42\4\0\15\42\5\0\3\42\1\0\7\42\17\0\4\43\30\0"+
    "\1\105\1\105\5\43\20\0\2\42\3\0\1\24\15\0\1\24\1\0"+
    "\1\42\13\0\4\43\6\0\6\43\1\0\1\42\10\0\3\24\2\0"+
    "\1\42\12\0\3\24\23\0\22\42\36\0\15\43\4\0\1\43\3\0"+
    "\6\43\25\0\2\24\1\42\4\24\1\42\2\24\12\42\1\24\1\42"+
    "\3\24\5\42\6\24\1\42\1\24\1\42\1\24\1\42\1\24\4\42"+
    "\1\24\3\42\1\0\7\42\2\24\1\0\3\42\5\24\5\42\1\24"+
    "\1\24\2\24\1\0\1\24\20\0\44\42\14\0\2\24\1\24\2\24"+
    "\5\24\2\24\4\24\1\24\2\24\1\24\2\24\1\24\7\24\1\24"+
    "\37\24\2\24\2\24\1\24\1\24\1\24\37\24\u010c\24\10\24\4\24"+
    "\24\24\2\24\7\24\2\0\121\24\1\24\36\24\31\24\50\24\6\24"+
    "\6\24\30\0\47\24\31\0\13\24\121\0\116\24\26\0\267\24\1\24"+
    "\11\24\1\24\66\24\10\24\157\24\1\24\56\24\2\0\35\24\3\0"+
    "\4\24\75\0\4\24\1\0\4\24\2\0\34\24\1\0\43\24\1\0"+
    "\1\24\1\0\4\24\3\0\1\24\1\0\7\24\2\0\7\24\130\0"+
    "\5\24\2\0\4\24\1\0\1\24\3\0\26\24\12\0\20\24\u0100\0"+
    "\203\24\26\0\77\24\4\0\40\24\2\0\u0102\24\60\0\25\24\2\0"+
    "\6\24\u04b8\0\3\42\31\0\11\42\6\43\1\0\5\42\2\0\5\42"+
    "\4\0\126\42\2\0\2\43\2\0\3\42\1\0\137\42\5\0\50\42"+
    "\4\0\136\42\21\0\30\42\70\0\20\42\u0200\0\u19b6\42\112\0\u51a6\42"+
    "\132\0\u048d\42\u0773\0\u2ba4\42\u215c\0\u012e\42\2\0\73\42\225\0\7\42"+
    "\14\0\5\42\5\0\1\42\1\43\12\42\1\24\15\42\1\0\5\42"+
    "\1\0\1\42\1\0\2\42\1\0\2\42\1\0\154\42\41\0\u016b\42"+
    "\22\0\100\42\2\0\66\42\50\0\15\42\3\0\20\43\20\0\4\43"+
    "\17\0\2\42\30\0\3\42\22\0\1\24\1\0\3\24\2\0\1\42"+
    "\6\0\5\42\1\0\207\42\2\0\1\43\4\0\1\42\6\0\1\24"+
    "\4\0\12\43\2\0\3\24\2\0\32\42\4\0\1\42\1\0\32\42"+
    "\1\0\1\24\1\0\1\24\6\0\132\42\3\0\6\42\2\0\6\42"+
    "\2\0\6\42\2\0\3\42\3\0\2\42\1\24\2\0\2\42\2\0"+
    "\4\24\14\0\3\43\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\2\3\1\4\4\2\1\1\1\5"+
    "\1\6\1\7\1\2\5\1\1\10\1\11\1\1\1\12"+
    "\13\2\1\13\1\14\1\15\2\2\1\16\1\17\1\20"+
    "\1\21\1\11\1\22\1\23\2\2\1\15\1\24\1\25"+
    "\1\26\23\27\1\30\24\27\4\31\1\32\1\33\2\34"+
    "\2\2\2\3\2\0\1\35\1\0\2\35\2\2\5\0"+
    "\4\2\1\36\1\0\1\2\1\0\2\2\1\37\1\0"+
    "\3\40\5\0\1\12\1\0\1\41\16\2\1\42\4\2"+
    "\1\43\1\44\1\45\1\46\1\47\2\0\3\2\1\50"+
    "\2\0\2\51\1\52\2\51\1\52\1\51\1\52\5\51"+
    "\1\52\3\51\1\0\1\53\2\0\1\2\1\0\4\3"+
    "\6\0\1\35\1\0\3\2\1\54\1\2\1\55\2\2"+
    "\5\0\1\2\1\56\3\40\7\0\1\41\1\0\10\2"+
    "\1\57\3\2\1\60\12\2\1\61\2\0\1\62\2\0"+
    "\3\2\1\63\1\64\3\0\1\65\1\0\1\65\12\0"+
    "\1\66\2\0\1\67\4\0\1\70\2\3\1\0\1\71"+
    "\4\2\1\72\1\2\4\0\2\2\1\73\2\2\1\74"+
    "\1\75\1\2\1\76\2\2\1\77\11\2\1\100\4\0"+
    "\3\2\1\72\1\0\1\65\20\0\1\3\1\2\1\101"+
    "\1\2\1\102\1\2\10\0\1\103\1\104\1\0\2\2"+
    "\1\105\1\106\1\2\1\107\4\2\1\110\2\2\1\111"+
    "\1\112\2\0\3\2\5\0\1\113\5\0\4\2\2\0"+
    "\1\114\2\0\3\2\1\115\1\116\1\2\1\117\2\2"+
    "\1\120\2\0\3\2\7\0\1\65\4\0\1\121\1\122"+
    "\1\123\1\2\3\0\6\2\2\0\1\124\1\2\1\125"+
    "\12\0\1\72\2\0\2\2\1\126\1\127\1\130\1\131"+
    "\2\0\1\2\1\72\7\0\2\2\2\0\1\132\4\0"+
    "\1\133\1\0\1\133\1\2\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[509];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\244\0\366\0\u0148\0\u019a\0\u01ec\0\u023e"+
    "\0\u0290\0\u02e2\0\u0334\0\u0386\0\u03d8\0\u042a\0\u047c\0\u04ce"+
    "\0\u0520\0\u0572\0\u03d8\0\u05c4\0\u0616\0\u0668\0\u06ba\0\u070c"+
    "\0\u075e\0\u01ec\0\u07b0\0\u0802\0\u0854\0\u08a6\0\u08f8\0\u094a"+
    "\0\u099c\0\u09ee\0\u0a40\0\u0a92\0\u0ae4\0\u0b36\0\u0b88\0\u0bda"+
    "\0\u019a\0\u019a\0\u0c2c\0\u0c7e\0\u0cd0\0\u019a\0\u019a\0\u019a"+
    "\0\u019a\0\u019a\0\u0d22\0\u0d74\0\u0dc6\0\u0e18\0\u0e6a\0\u019a"+
    "\0\u019a\0\u019a\0\u019a\0\u01ec\0\u023e\0\u0290\0\u02e2\0\u0334"+
    "\0\u0386\0\u03d8\0\u042a\0\u047c\0\u04ce\0\u0520\0\u0572\0\u05c4"+
    "\0\u0616\0\u0668\0\u06ba\0\u070c\0\u075e\0\u0ebc\0\u0802\0\u0854"+
    "\0\u08a6\0\u08f8\0\u094a\0\u099c\0\u09ee\0\u0a40\0\u0a92\0\u0ae4"+
    "\0\u0b36\0\u0b88\0\u0bda\0\u0e6a\0\u0c7e\0\u0cd0\0\u0d22\0\u0d74"+
    "\0\u0dc6\0\u0e18\0\u019a\0\u0f0e\0\u0f60\0\u0fb2\0\u1004\0\u1056"+
    "\0\u019a\0\u10a8\0\u10fa\0\u114c\0\u119e\0\u11f0\0\u1242\0\u1294"+
    "\0\u12e6\0\u1338\0\u019a\0\u138a\0\u13dc\0\u142e\0\u0616\0\u0668"+
    "\0\u06ba\0\u070c\0\u075e\0\u1480\0\u14d2\0\u1524\0\u1576\0\u01ec"+
    "\0\u04ce\0\u019a\0\u15c8\0\u161a\0\u166c\0\u16be\0\u1710\0\u1762"+
    "\0\u17b4\0\u1806\0\u1858\0\u18aa\0\u18fc\0\u194e\0\u19a0\0\u19f2"+
    "\0\u1a44\0\u1a96\0\u1ae8\0\u1b3a\0\u1b8c\0\u1bde\0\u1c30\0\u1c82"+
    "\0\u1cd4\0\u1d26\0\u1d78\0\u1dca\0\u1e1c\0\u1e6e\0\u1ec0\0\u1f12"+
    "\0\u01ec\0\u1f64\0\u1fb6\0\u2008\0\u205a\0\u03d8\0\u03d8\0\u03d8"+
    "\0\u03d8\0\u03d8\0\u20ac\0\u20fe\0\u2150\0\u21a2\0\u21f4\0\u03d8"+
    "\0\u2246\0\u2298\0\u019a\0\u22ea\0\u233c\0\u238e\0\u23e0\0\u019a"+
    "\0\u2432\0\u2484\0\u24d6\0\u2528\0\u257a\0\u25cc\0\u261e\0\u2670"+
    "\0\u26c2\0\u2714\0\u1004\0\u2766\0\u019a\0\u27b8\0\u280a\0\u285c"+
    "\0\u28ae\0\u2900\0\u2952\0\u29a4\0\u29f6\0\u2a48\0\u2a9a\0\u2aec"+
    "\0\u2b3e\0\u2b90\0\u2be2\0\u2c34\0\u2c86\0\u2cd8\0\u2d2a\0\u2d7c"+
    "\0\u2dce\0\u2e20\0\u01ec\0\u04ce\0\u2e72\0\u2ec4\0\u2f16\0\u2f68"+
    "\0\u2fba\0\u300c\0\u305e\0\u019a\0\u30b0\0\u3102\0\u3154\0\u31a6"+
    "\0\u31f8\0\u324a\0\u329c\0\u32ee\0\u3340\0\u3392\0\u019a\0\u33e4"+
    "\0\u3436\0\u3488\0\u34da\0\u352c\0\u357e\0\u35d0\0\u3622\0\u3674"+
    "\0\u01ec\0\u36c6\0\u3718\0\u376a\0\u01ec\0\u37bc\0\u380e\0\u3860"+
    "\0\u38b2\0\u3904\0\u3956\0\u39a8\0\u39fa\0\u3a4c\0\u3a9e\0\u019a"+
    "\0\u3af0\0\u3b42\0\u019a\0\u3b94\0\u3be6\0\u3c38\0\u3c8a\0\u3cdc"+
    "\0\u01ec\0\u01ec\0\u3d2e\0\u3d80\0\u22ea\0\u3dd2\0\u3e24\0\u019a"+
    "\0\u3e76\0\u3ec8\0\u3f1a\0\u3f6c\0\u3fbe\0\u4010\0\u4062\0\u40b4"+
    "\0\u4106\0\u4158\0\u019a\0\u41aa\0\u41fc\0\u019a\0\u424e\0\u42a0"+
    "\0\u42f2\0\u4344\0\u01ec\0\u4396\0\u019a\0\u43e8\0\u01ec\0\u443a"+
    "\0\u448c\0\u44de\0\u4530\0\u161a\0\u4582\0\u45d4\0\u4626\0\u4678"+
    "\0\u46ca\0\u471c\0\u476e\0\u47c0\0\u4812\0\u4864\0\u01ec\0\u01ec"+
    "\0\u48b6\0\u01ec\0\u4908\0\u495a\0\u01ec\0\u49ac\0\u49fe\0\u4a50"+
    "\0\u4aa2\0\u4af4\0\u4b46\0\u4b98\0\u4bea\0\u4c3c\0\u01ec\0\u4c8e"+
    "\0\u4ce0\0\u4d32\0\u4d84\0\u4dd6\0\u4e28\0\u4e7a\0\u2246\0\u4ecc"+
    "\0\u4f1e\0\u4f70\0\u4fc2\0\u5014\0\u5066\0\u50b8\0\u510a\0\u515c"+
    "\0\u51ae\0\u5200\0\u5252\0\u52a4\0\u52f6\0\u5348\0\u539a\0\u53ec"+
    "\0\u543e\0\u2a48\0\u5490\0\u01ec\0\u54e2\0\u5534\0\u5586\0\u55d8"+
    "\0\u562a\0\u567c\0\u56ce\0\u5720\0\u5772\0\u57c4\0\u5816\0\u01ec"+
    "\0\u01ec\0\u5868\0\u58ba\0\u590c\0\u01ec\0\u01ec\0\u595e\0\u01ec"+
    "\0\u59b0\0\u5a02\0\u5a54\0\u5aa6\0\u01ec\0\u5af8\0\u5b4a\0\u01ec"+
    "\0\u01ec\0\u5b9c\0\u5bee\0\u5c40\0\u5c92\0\u5ce4\0\u5d36\0\u5d88"+
    "\0\u5dda\0\u5e2c\0\u5e7e\0\u5ed0\0\u5f22\0\u5f74\0\u5fc6\0\u6018"+
    "\0\u606a\0\u60bc\0\u610e\0\u6160\0\u61b2\0\u6204\0\u6256\0\u019a"+
    "\0\u62a8\0\u62fa\0\u634c\0\u639e\0\u63f0\0\u01ec\0\u01ec\0\u6442"+
    "\0\u01ec\0\u6494\0\u64e6\0\u01ec\0\u6538\0\u658a\0\u65dc\0\u662e"+
    "\0\u6680\0\u66d2\0\u6724\0\u6776\0\u67c8\0\u681a\0\u686c\0\u68be"+
    "\0\u68be\0\u6910\0\u6962\0\u69b4\0\u6a06\0\u01ec\0\u01ec\0\u01ec"+
    "\0\u6a58\0\u6aaa\0\u6afc\0\u6b4e\0\u6ba0\0\u6bf2\0\u6c44\0\u6c96"+
    "\0\u6ce8\0\u6d3a\0\u6d8c\0\u6dde\0\u01ec\0\u6e30\0\u01ec\0\u6e82"+
    "\0\u6ed4\0\u6f26\0\u6f78\0\u6fca\0\u701c\0\u706e\0\u70c0\0\u7112"+
    "\0\u7164\0\u4582\0\u71b6\0\u7208\0\u725a\0\u72ac\0\u01ec\0\u01ec"+
    "\0\u01ec\0\u01ec\0\u72fe\0\u7350\0\u73a2\0\u4ecc\0\u73f4\0\u7446"+
    "\0\u7498\0\u74ea\0\u753c\0\u758e\0\u75e0\0\u7632\0\u7684\0\u76d6"+
    "\0\u7728\0\u01ec\0\u777a\0\u77cc\0\u781e\0\u7870\0\u019a\0\u78c2"+
    "\0\u01ec\0\u7914\0\u7966\0\u79b8\0\u7a0a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[509];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\7\2\12\1\7\1\13"+
    "\1\7\1\14\2\15\1\7\1\16\1\7\1\17\1\20"+
    "\1\15\1\21\1\15\1\22\1\23\1\15\1\24\1\25"+
    "\1\12\1\26\1\7\1\27\1\12\1\30\1\31\1\12"+
    "\1\7\1\6\1\32\1\33\2\7\1\34\1\35\1\36"+
    "\1\37\1\40\1\7\1\41\1\42\1\43\1\44\1\7"+
    "\1\45\1\46\1\47\1\7\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\15\1\56\1\57\1\60\1\61\1\12"+
    "\3\33\1\62\1\15\3\7\1\63\1\64\1\65\1\7"+
    "\1\66\2\7\1\6\1\7\1\10\1\11\1\7\2\12"+
    "\1\7\1\13\1\7\1\14\2\15\1\7\1\16\1\7"+
    "\1\17\1\20\1\15\1\21\1\15\1\22\1\23\1\15"+
    "\1\24\1\25\1\12\1\26\1\7\1\27\1\12\1\30"+
    "\1\31\1\12\1\7\1\6\1\32\1\33\2\7\1\34"+
    "\1\35\1\36\1\37\1\40\1\7\1\41\1\42\1\43"+
    "\1\44\1\7\1\45\1\46\1\47\1\7\1\50\1\51"+
    "\1\52\1\67\1\54\1\55\1\15\1\56\1\70\1\71"+
    "\1\72\1\12\3\33\1\62\1\15\3\7\1\63\1\64"+
    "\1\65\1\7\1\66\2\7\1\73\1\74\1\75\1\76"+
    "\1\74\2\77\1\74\1\100\1\74\1\101\2\102\1\74"+
    "\1\103\1\74\1\104\1\105\1\102\1\106\1\102\1\107"+
    "\2\102\1\110\1\111\1\77\1\112\1\74\1\113\1\77"+
    "\1\114\1\115\1\77\1\74\1\73\1\74\1\116\2\74"+
    "\1\117\1\120\1\121\1\122\1\123\1\74\1\124\1\125"+
    "\1\126\1\127\1\74\1\130\1\131\1\132\1\74\1\133"+
    "\2\73\1\134\1\135\1\136\1\102\4\73\1\77\3\116"+
    "\1\73\1\102\3\74\1\137\1\140\1\141\1\74\1\142"+
    "\2\74\23\143\1\144\1\143\1\145\2\143\1\146\14\143"+
    "\1\147\35\143\3\147\1\150\13\143\74\151\1\152\25\151"+
    "\123\0\7\7\1\0\2\7\2\0\4\7\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\2\7\2\0\16\7\12\0\1\7\1\0\1\7\3\0"+
    "\3\7\2\0\5\7\1\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\3\7\1\153\1\0\2\7\2\0\1\7\1\154\14\7"+
    "\12\0\1\7\1\0\1\7\3\0\3\7\2\0\5\7"+
    "\1\0\2\155\1\156\1\157\1\160\1\156\1\0\1\161"+
    "\2\162\2\0\4\163\11\0\1\156\3\0\1\156\2\0"+
    "\1\160\40\0\1\156\20\0\2\155\1\12\1\0\2\12"+
    "\1\0\1\161\2\162\2\0\4\163\11\0\1\12\3\0"+
    "\1\12\2\0\1\12\40\0\1\12\22\0\1\164\1\0"+
    "\2\164\23\0\1\164\3\0\1\164\2\0\1\164\40\0"+
    "\1\164\20\0\1\7\1\165\1\7\1\166\3\7\1\0"+
    "\2\7\2\0\4\7\11\0\1\7\1\0\1\7\1\0"+
    "\1\7\2\0\3\7\1\153\1\0\2\7\2\0\16\7"+
    "\12\0\1\7\1\0\1\7\3\0\3\7\2\0\5\7"+
    "\13\0\2\15\5\0\7\15\1\167\1\0\1\170\1\0"+
    "\1\171\1\0\1\172\1\173\31\0\4\15\11\0\1\15"+
    "\13\0\7\7\1\0\2\7\2\0\4\7\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\2\7\2\0\1\7\1\174\4\7\1\175\3\7\1\176"+
    "\3\7\12\0\1\7\1\0\1\7\3\0\3\7\2\0"+
    "\5\7\1\0\7\7\1\0\1\7\1\177\2\0\4\7"+
    "\11\0\1\7\1\0\1\7\1\0\1\7\2\0\3\7"+
    "\1\153\1\0\2\7\2\0\6\7\1\200\7\7\12\0"+
    "\1\7\1\0\1\7\3\0\3\7\2\0\5\7\21\201"+
    "\1\202\5\201\1\203\15\201\1\0\3\201\1\0\31\201"+
    "\3\0\14\201\13\0\2\15\5\0\1\204\6\15\1\167"+
    "\1\0\1\170\1\0\1\171\1\0\1\172\1\173\31\0"+
    "\4\15\11\0\1\15\25\0\2\15\5\0\3\15\1\205"+
    "\3\15\1\167\1\0\1\170\1\0\1\171\1\0\1\172"+
    "\1\173\31\0\4\15\11\0\1\15\25\0\2\15\5\0"+
    "\6\15\1\206\1\167\1\0\1\170\1\0\1\171\1\0"+
    "\1\172\1\173\31\0\4\15\11\0\1\15\44\0\1\15"+
    "\123\0\1\15\123\0\1\15\101\0\1\15\144\0\1\15"+
    "\125\0\1\33\35\0\4\33\13\0\1\207\2\210\1\207"+
    "\1\210\2\207\1\210\1\207\2\210\2\211\4\210\1\207"+
    "\5\211\1\212\1\211\1\213\1\207\1\214\1\210\1\215"+
    "\1\207\1\216\1\217\1\207\1\210\1\207\1\210\1\0"+
    "\2\210\1\0\1\207\16\210\2\207\4\211\5\207\1\0"+
    "\3\207\1\211\3\210\2\207\5\210\27\220\1\221\15\220"+
    "\1\0\3\220\1\222\31\220\1\0\16\220\1\0\1\7"+
    "\1\223\5\7\1\0\2\7\2\0\4\7\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\2\7\2\0\1\7\1\224\14\7\12\0\1\7\1\0"+
    "\1\7\3\0\3\7\2\0\5\7\1\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\1\7\1\0\1\225\1\0"+
    "\1\7\2\0\3\7\1\153\1\0\2\7\2\0\16\7"+
    "\12\0\1\7\1\0\1\7\3\0\3\7\2\0\5\7"+
    "\1\0\7\7\1\0\2\7\2\0\4\7\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\2\7\2\0\3\7\1\226\3\7\1\227\3\7\1\230"+
    "\2\7\12\0\1\7\1\0\1\7\3\0\3\7\2\0"+
    "\5\7\1\0\7\7\1\0\1\7\1\231\2\0\4\7"+
    "\11\0\1\7\1\0\1\7\1\0\1\7\2\0\3\7"+
    "\1\153\1\0\1\232\1\7\2\0\16\7\12\0\1\7"+
    "\1\0\1\7\3\0\3\7\2\0\5\7\1\0\7\7"+
    "\1\0\1\7\1\233\2\0\4\7\11\0\1\7\1\0"+
    "\1\7\1\0\1\7\2\0\3\7\1\153\1\0\1\234"+
    "\1\7\2\0\16\7\12\0\1\7\1\0\1\7\3\0"+
    "\3\7\2\0\5\7\1\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\1\7\1\0\1\235\1\0\1\7\2\0"+
    "\3\7\1\153\1\0\2\7\2\0\16\7\12\0\1\7"+
    "\1\0\1\7\3\0\3\7\2\0\2\7\1\236\2\7"+
    "\1\0\7\7\1\0\1\7\1\237\2\0\4\7\11\0"+
    "\1\7\1\0\1\7\1\0\1\7\2\0\3\7\1\153"+
    "\1\0\2\7\2\0\16\7\12\0\1\7\1\0\1\7"+
    "\3\0\3\7\2\0\5\7\1\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\1\7\1\0\1\7\1\0\1\7"+
    "\2\0\3\7\1\153\1\0\2\7\2\0\1\7\1\240"+
    "\14\7\12\0\1\7\1\0\1\7\3\0\3\7\2\0"+
    "\5\7\1\0\7\7\1\0\2\7\2\0\1\7\1\241"+
    "\2\7\11\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\3\7\1\153\1\0\2\7\2\0\11\7\1\242\4\7"+
    "\12\0\1\7\1\0\1\7\3\0\3\7\2\0\5\7"+
    "\1\0\7\7\1\0\2\7\2\0\4\7\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\2\7\2\0\12\7\1\243\3\7\12\0\1\7\1\0"+
    "\1\7\3\0\3\7\2\0\5\7\1\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\1\7\1\0\1\7\1\0"+
    "\1\7\2\0\3\7\1\153\1\0\2\7\2\0\3\7"+
    "\1\244\6\7\1\245\3\7\12\0\1\7\1\0\1\7"+
    "\3\0\3\7\2\0\5\7\13\0\2\15\5\0\7\15"+
    "\1\167\1\0\1\170\1\0\1\171\1\0\1\172\1\173"+
    "\31\0\1\15\1\246\2\15\11\0\1\15\25\0\2\15"+
    "\5\0\3\15\1\247\3\15\1\167\1\0\1\170\1\0"+
    "\1\171\1\0\1\172\1\173\31\0\4\15\11\0\1\15"+
    "\25\0\1\15\1\250\5\0\3\15\1\251\3\15\1\167"+
    "\1\0\1\170\1\0\1\171\1\0\1\172\1\173\31\0"+
    "\3\15\1\252\11\0\1\15\106\0\1\253\121\0\1\254"+
    "\26\0\7\7\1\0\2\7\2\0\4\7\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\2\7\2\0\1\7\1\255\5\7\1\256\6\7\12\0"+
    "\1\7\1\0\1\7\3\0\3\7\2\0\5\7\1\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\1\7\1\0"+
    "\1\7\1\0\1\7\2\0\3\7\1\153\1\0\2\7"+
    "\2\0\1\7\1\257\14\7\12\0\1\7\1\0\1\7"+
    "\3\0\3\7\2\0\5\7\13\0\2\15\5\0\7\15"+
    "\1\167\1\0\1\170\1\0\1\171\1\0\1\172\1\173"+
    "\31\0\1\15\1\260\2\15\11\0\1\15\57\0\1\116"+
    "\35\0\4\116\35\0\1\261\124\0\1\262\124\0\1\206"+
    "\71\0\3\263\1\264\1\263\2\264\1\263\1\265\1\263"+
    "\1\266\3\263\1\267\4\263\1\270\1\263\1\270\1\263"+
    "\1\271\2\263\1\264\3\263\1\264\2\263\1\264\2\263"+
    "\1\272\1\147\4\263\1\273\6\263\1\274\1\263\1\275"+
    "\1\263\1\276\1\263\1\277\2\270\1\300\1\301\1\302"+
    "\1\263\4\270\1\264\4\303\13\263\74\0\1\304\26\0"+
    "\2\305\1\0\1\305\2\0\1\305\1\0\2\305\2\0"+
    "\4\305\1\0\1\306\11\0\1\305\5\0\1\305\1\0"+
    "\1\305\1\0\2\305\2\0\16\305\17\0\1\307\3\305"+
    "\2\0\5\305\1\0\7\7\1\0\2\7\2\15\4\7"+
    "\1\0\7\15\1\167\1\7\1\170\1\7\1\171\1\7"+
    "\1\172\1\173\3\7\1\153\1\0\2\7\2\0\16\7"+
    "\2\0\4\15\4\0\1\7\1\0\1\7\2\0\1\15"+
    "\3\7\2\0\5\7\1\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\3\7\1\153\1\0\2\7\2\0\16\7\12\0\1\7"+
    "\1\0\1\7\3\0\3\7\2\0\1\7\1\310\3\7"+
    "\10\0\1\311\112\0\2\155\1\156\1\0\1\160\1\156"+
    "\1\0\1\161\2\162\2\0\4\163\11\0\1\156\3\0"+
    "\1\156\2\0\1\160\40\0\1\156\22\0\1\312\1\0"+
    "\3\312\1\0\2\312\2\0\4\312\11\0\1\312\1\0"+
    "\1\312\1\0\1\312\2\0\1\312\5\0\1\312\2\0"+
    "\2\312\26\0\1\312\5\0\1\312\14\0\1\160\1\0"+
    "\2\160\1\0\1\164\2\162\2\0\4\163\11\0\1\160"+
    "\3\0\1\160\2\0\1\160\40\0\1\160\20\0\2\313"+
    "\1\164\1\313\2\164\1\313\1\0\2\314\2\315\4\313"+
    "\1\316\7\315\1\317\1\164\1\320\1\313\1\321\1\164"+
    "\1\322\1\323\1\164\1\313\1\0\1\313\1\311\2\313"+
    "\2\0\16\313\2\0\4\315\4\0\1\164\4\311\1\315"+
    "\3\313\2\0\5\313\3\0\1\324\1\0\2\324\4\0"+
    "\2\325\15\0\1\324\3\0\1\324\2\0\1\324\40\0"+
    "\1\324\22\0\1\164\1\0\2\164\2\0\2\162\2\0"+
    "\4\163\11\0\1\164\3\0\1\164\2\0\1\164\40\0"+
    "\1\164\20\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\1\7\1\0\1\7\1\0\1\7\2\0\3\7\1\153"+
    "\1\0\2\7\2\0\4\7\1\326\11\7\12\0\1\7"+
    "\1\0\1\7\3\0\3\7\2\0\5\7\1\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\1\7\1\0\1\7"+
    "\1\0\1\7\2\0\3\7\1\153\1\0\2\7\2\0"+
    "\2\7\1\327\13\7\12\0\1\7\1\0\1\7\3\0"+
    "\3\7\2\0\5\7\1\0\1\7\1\330\5\7\1\0"+
    "\2\7\2\0\4\7\11\0\1\7\1\0\1\7\1\0"+
    "\1\7\2\0\3\7\1\153\1\0\2\7\2\0\16\7"+
    "\12\0\1\7\1\0\1\7\3\0\3\7\2\0\5\7"+
    "\1\0\7\7\1\0\2\7\2\0\4\7\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\2\7\2\0\7\7\1\331\6\7\12\0\1\7\1\0"+
    "\1\7\3\0\3\7\2\0\5\7\1\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\1\7\1\0\1\7\1\0"+
    "\1\7\2\0\3\7\1\153\1\0\2\7\2\0\5\7"+
    "\1\332\10\7\12\0\1\7\1\0\1\7\3\0\3\7"+
    "\2\0\5\7\1\0\7\7\1\0\2\7\2\0\1\7"+
    "\1\333\2\7\11\0\1\7\1\0\1\7\1\0\1\7"+
    "\2\0\3\7\1\153\1\0\2\7\2\0\16\7\12\0"+
    "\1\7\1\0\1\7\3\0\3\7\2\0\5\7\21\201"+
    "\1\334\5\201\1\203\15\201\1\0\35\201\1\0\16\201"+
    "\13\261\2\204\5\261\1\335\6\204\1\336\1\261\1\337"+
    "\1\261\1\340\1\261\1\341\1\342\31\261\4\204\11\261"+
    "\1\204\12\261\13\0\2\15\5\0\1\15\1\343\5\15"+
    "\1\167\1\0\1\170\1\0\1\171\1\0\1\172\1\173"+
    "\31\0\4\15\11\0\1\15\12\0\45\206\1\0\35\206"+
    "\1\0\16\206\27\0\1\344\20\0\1\344\52\0\7\345"+
    "\1\0\2\345\2\0\4\345\6\0\1\344\2\0\1\345"+
    "\1\0\1\345\1\0\1\345\2\0\3\345\1\346\1\0"+
    "\2\345\1\344\1\0\16\345\12\0\1\345\1\0\1\345"+
    "\3\0\3\345\2\0\5\345\13\0\2\347\5\0\7\347"+
    "\1\350\1\0\1\351\1\0\1\352\1\0\1\353\1\354"+
    "\7\0\1\344\21\0\4\347\11\0\1\347\12\0\3\207"+
    "\1\355\2\207\1\355\4\207\2\211\5\207\7\211\1\213"+
    "\1\355\1\214\1\207\1\215\1\355\1\216\1\217\4\207"+
    "\1\0\1\356\23\207\4\211\4\207\1\355\1\0\3\207"+
    "\1\211\12\207\27\0\1\344\2\0\1\347\15\0\1\344"+
    "\100\0\1\344\4\0\1\347\13\0\1\344\100\0\1\344"+
    "\6\0\1\347\11\0\1\344\67\0\1\347\10\0\1\344"+
    "\20\0\1\344\100\0\1\344\11\0\1\347\6\0\1\344"+
    "\51\0\27\220\1\221\15\220\1\0\3\220\1\357\31\220"+
    "\1\0\63\220\1\0\35\220\1\0\16\220\51\0\1\360"+
    "\51\0\7\7\1\0\2\7\2\0\4\7\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\2\7\2\0\1\7\1\361\14\7\12\0\1\7\1\0"+
    "\1\7\3\0\3\7\2\0\5\7\1\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\1\7\1\0\1\7\1\0"+
    "\1\7\2\0\3\7\1\153\1\0\2\7\2\0\2\7"+
    "\1\362\1\7\1\363\11\7\12\0\1\7\1\0\1\7"+
    "\3\0\3\7\2\0\5\7\1\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\1\7\1\0\1\7\1\0\1\7"+
    "\2\0\3\7\1\153\1\0\2\7\2\0\4\7\1\364"+
    "\11\7\12\0\1\7\1\0\1\7\3\0\3\7\2\0"+
    "\5\7\1\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\1\7\1\0\1\7\1\0\1\7\2\0\3\7\1\153"+
    "\1\0\2\7\2\0\7\7\1\365\2\7\1\366\3\7"+
    "\12\0\1\7\1\0\1\7\3\0\3\7\2\0\5\7"+
    "\1\0\7\7\1\0\2\7\2\0\4\7\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\1\367\1\7\2\0\1\7\1\370\11\7\1\371\2\7"+
    "\12\0\1\7\1\0\1\7\3\0\3\7\2\0\5\7"+
    "\1\0\7\7\1\0\2\7\2\0\4\7\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\2\7\2\0\16\7\12\0\1\7\1\0\1\7\3\0"+
    "\3\7\2\0\1\372\4\7\1\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\1\7\1\0\1\7\1\0\1\7"+
    "\2\0\3\7\1\153\1\0\2\7\2\0\1\7\1\373"+
    "\14\7\12\0\1\7\1\0\1\7\3\0\3\7\2\0"+
    "\5\7\1\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\1\7\1\0\1\7\1\0\1\7\2\0\3\7\1\153"+
    "\1\0\2\7\2\0\16\7\12\0\1\7\1\0\1\7"+
    "\3\0\3\7\2\0\1\374\4\7\1\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\1\7\1\0\1\7\1\0"+
    "\1\7\2\0\3\7\1\153\1\0\2\7\2\0\15\7"+
    "\1\375\12\0\1\7\1\0\1\7\3\0\3\7\2\0"+
    "\5\7\1\0\1\7\1\376\5\7\1\0\2\7\2\0"+
    "\4\7\11\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\3\7\1\153\1\0\2\7\2\0\16\7\12\0\1\7"+
    "\1\0\1\7\3\0\3\7\2\0\5\7\1\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\1\7\1\0\1\7"+
    "\1\0\1\7\2\0\3\7\1\153\1\0\2\7\2\0"+
    "\16\7\12\0\1\7\1\0\1\7\3\0\2\7\1\377"+
    "\2\0\5\7\1\0\7\7\1\0\1\7\1\u0100\2\0"+
    "\4\7\11\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\3\7\1\153\1\0\2\7\2\0\16\7\12\0\1\7"+
    "\1\0\1\7\3\0\3\7\2\0\5\7\1\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\1\7\1\0\1\7"+
    "\1\0\1\7\2\0\3\7\1\153\1\0\2\7\2\0"+
    "\2\7\1\u0101\11\7\1\u0102\1\7\12\0\1\7\1\0"+
    "\1\7\3\0\3\7\2\0\5\7\1\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\1\7\1\0\1\7\1\0"+
    "\1\7\2\0\3\7\1\153\1\0\2\7\2\0\2\7"+
    "\1\u0103\13\7\12\0\1\7\1\0\1\7\3\0\3\7"+
    "\2\0\5\7\1\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\1\7\1\0\1\7\1\0\1\7\2\0\3\7"+
    "\1\153\1\0\2\7\2\0\16\7\12\0\1\7\1\0"+
    "\1\7\3\0\3\7\2\0\1\u0104\4\7\1\0\7\7"+
    "\1\0\1\7\1\u0105\2\0\4\7\11\0\1\7\1\0"+
    "\1\7\1\0\1\7\2\0\3\7\1\153\1\0\2\7"+
    "\2\0\16\7\12\0\1\7\1\0\1\7\3\0\3\7"+
    "\2\0\5\7\1\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\1\7\1\0\1\7\1\0\1\7\2\0\3\7"+
    "\1\153\1\0\2\7\2\0\12\7\1\u0106\3\7\12\0"+
    "\1\7\1\0\1\7\3\0\3\7\2\0\5\7\1\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\1\7\1\0"+
    "\1\7\1\0\1\7\2\0\3\7\1\153\1\0\2\7"+
    "\2\0\2\7\1\u0107\13\7\12\0\1\7\1\0\1\7"+
    "\3\0\3\7\2\0\5\7\1\0\2\u0108\1\0\1\u0108"+
    "\2\0\1\u0108\1\0\2\u0108\2\0\4\u0108\1\0\1\u0109"+
    "\11\0\1\u0108\5\0\1\u0108\1\0\1\u0108\1\0\2\u0108"+
    "\2\0\16\u0108\17\0\1\u010a\3\u0108\2\0\5\u0108\1\0"+
    "\2\u010b\1\0\1\u010b\2\0\1\u010b\1\0\2\u010b\2\0"+
    "\4\u010b\1\0\1\u010c\11\0\1\u010b\5\0\1\u010b\1\0"+
    "\1\u010b\1\0\2\u010b\2\0\16\u010b\17\0\1\u010d\3\u010b"+
    "\2\0\5\u010b\1\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\1\7\1\0\1\7\1\0\1\7\2\0\3\7"+
    "\1\153\1\0\2\7\2\0\1\u010e\15\7\12\0\1\7"+
    "\1\0\1\7\3\0\3\7\2\0\5\7\1\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\1\7\1\0\1\7"+
    "\1\0\1\7\2\0\3\7\1\153\1\0\2\7\2\0"+
    "\6\7\1\u010f\3\7\1\u0110\3\7\12\0\1\7\1\0"+
    "\1\7\3\0\3\7\2\0\5\7\1\0\1\7\1\u0111"+
    "\5\7\1\0\2\7\2\0\4\7\11\0\1\7\1\0"+
    "\1\7\1\0\1\7\2\0\3\7\1\153\1\0\2\7"+
    "\2\0\7\7\1\u0112\6\7\12\0\1\7\1\0\1\7"+
    "\3\0\3\7\2\0\5\7\22\261\1\u0113\77\261\23\0"+
    "\1\u0114\101\0\1\u0115\1\0\2\u0115\1\0\1\u0116\2\u0117"+
    "\2\0\4\u0118\11\0\1\u0115\3\0\1\u0115\2\0\1\u0115"+
    "\40\0\1\u0115\22\0\1\u0116\1\0\2\u0116\23\0\1\u0116"+
    "\3\0\1\u0116\2\0\1\u0116\40\0\1\u0116\21\0\1\u0119"+
    "\1\0\1\u011a\175\0\1\u011b\3\0\1\u011c\103\0\1\u011d"+
    "\54\0\7\u0118\1\0\2\u0118\2\0\4\u0118\11\0\1\u0118"+
    "\1\0\1\u0118\1\0\1\u0118\2\0\4\u0118\1\0\2\u0118"+
    "\2\0\16\u0118\12\0\1\u0118\1\0\1\u0118\3\0\3\u0118"+
    "\2\0\5\u0118\53\0\1\u011e\60\0\1\u011f\162\0\1\u0120"+
    "\132\0\1\u0121\121\0\1\u0122\130\0\1\270\53\0\1\270"+
    "\75\0\2\u0123\1\0\1\u0123\2\0\1\u0123\1\0\2\u0123"+
    "\1\0\1\270\4\u0123\1\0\1\u0124\2\0\1\270\6\0"+
    "\1\u0123\5\0\1\u0123\1\0\1\u0123\1\0\2\u0123\2\0"+
    "\16\u0123\5\0\1\270\11\0\1\u0125\3\u0123\2\0\5\u0123"+
    "\1\0\2\u0126\1\0\1\u0126\2\0\1\u0126\1\0\2\u0126"+
    "\2\0\4\u0126\1\0\1\u0127\11\0\1\u0126\5\0\1\u0126"+
    "\1\0\1\u0126\1\0\2\u0126\2\0\16\u0126\17\0\1\u0128"+
    "\3\u0126\2\0\5\u0126\14\0\1\u0129\61\0\1\u012a\24\0"+
    "\2\305\1\0\1\305\2\0\1\305\1\0\2\305\2\0"+
    "\4\305\13\0\1\305\5\0\1\305\1\0\1\305\1\0"+
    "\2\305\2\0\16\305\20\0\3\305\2\0\5\305\1\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\1\7\1\0"+
    "\1\7\1\0\1\7\2\0\3\7\1\153\1\0\2\7"+
    "\2\0\13\7\1\u012b\2\7\12\0\1\7\1\0\1\7"+
    "\3\0\3\7\2\0\5\7\1\0\2\313\1\0\1\313"+
    "\2\0\1\313\1\0\2\313\2\315\4\313\1\316\7\315"+
    "\1\317\1\0\1\320\1\313\1\321\1\0\1\322\1\323"+
    "\1\0\1\313\1\0\1\313\1\311\2\313\2\0\16\313"+
    "\2\0\4\315\5\0\4\311\1\315\3\313\2\0\5\313"+
    "\1\0\2\155\1\312\1\0\3\312\1\311\2\312\2\0"+
    "\4\312\11\0\1\312\1\0\1\312\1\0\1\312\2\0"+
    "\1\312\5\0\1\312\2\0\2\312\26\0\1\312\5\0"+
    "\1\312\12\0\7\313\1\0\2\313\2\0\4\313\11\0"+
    "\1\313\1\0\1\313\1\0\1\313\2\0\3\313\1\u012c"+
    "\1\0\2\313\2\0\16\313\12\0\1\313\1\0\1\313"+
    "\3\0\3\313\2\0\5\313\1\0\7\313\1\0\2\313"+
    "\2\325\4\313\11\0\1\313\1\0\1\313\1\0\1\313"+
    "\2\0\3\313\1\u012c\1\0\2\313\2\0\16\313\12\0"+
    "\1\313\1\0\1\313\3\0\3\313\2\0\5\313\13\0"+
    "\2\315\5\0\7\315\1\317\1\0\1\320\1\0\1\321"+
    "\1\0\1\322\1\323\31\0\4\315\11\0\1\315\12\0"+
    "\21\316\1\u012d\5\316\1\u012e\15\316\1\0\3\316\1\0"+
    "\31\316\3\0\14\316\32\0\1\315\123\0\1\315\123\0"+
    "\1\315\101\0\1\315\144\0\1\315\63\0\1\324\1\0"+
    "\2\324\6\0\4\163\11\0\1\324\3\0\1\324\2\0"+
    "\1\324\40\0\1\324\22\0\1\324\1\0\2\324\23\0"+
    "\1\324\3\0\1\324\2\0\1\324\40\0\1\324\20\0"+
    "\7\7\1\0\1\7\1\u012f\2\0\4\7\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\2\7\2\0\16\7\12\0\1\7\1\0\1\7\3\0"+
    "\3\7\2\0\5\7\1\0\7\7\1\0\1\7\1\u0130"+
    "\2\0\4\7\11\0\1\7\1\0\1\7\1\0\1\7"+
    "\2\0\3\7\1\153\1\0\2\7\2\0\16\7\12\0"+
    "\1\7\1\0\1\7\3\0\3\7\2\0\5\7\1\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\1\7\1\0"+
    "\1\7\1\0\1\7\2\0\3\7\1\153\1\0\2\7"+
    "\2\0\4\7\1\u0131\11\7\12\0\1\7\1\0\1\7"+
    "\3\0\3\7\2\0\5\7\1\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\1\7\1\0\1\7\1\0\1\7"+
    "\2\0\3\7\1\153\1\0\2\7\2\0\10\7\1\u0132"+
    "\5\7\12\0\1\7\1\0\1\7\3\0\3\7\2\0"+
    "\5\7\1\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\1\7\1\0\1\7\1\0\1\7\2\0\3\7\1\153"+
    "\1\0\2\7\2\0\1\7\1\u0133\14\7\12\0\1\7"+
    "\1\0\1\7\3\0\3\7\2\0\5\7\13\261\2\204"+
    "\5\261\1\335\1\u0134\5\204\1\336\1\261\1\337\1\261"+
    "\1\340\1\261\1\341\1\342\31\261\4\204\11\261\1\204"+
    "\34\261\1\u0113\7\261\1\204\111\261\1\u0113\11\261\1\204"+
    "\107\261\1\u0113\13\261\1\204\101\261\1\204\3\261\1\u0113"+
    "\121\261\1\u0113\16\261\1\204\60\261\13\0\2\15\5\0"+
    "\1\u0135\6\15\1\167\1\0\1\170\1\0\1\171\1\0"+
    "\1\172\1\173\31\0\4\15\11\0\1\15\13\0\7\345"+
    "\1\0\2\345\2\0\4\345\11\0\1\345\1\0\1\345"+
    "\1\0\1\345\2\0\3\345\1\346\1\0\2\345\2\0"+
    "\16\345\12\0\1\345\1\0\1\345\3\0\3\345\2\0"+
    "\5\345\1\0\7\345\1\0\2\345\2\347\4\345\1\0"+
    "\7\347\1\350\1\345\1\351\1\345\1\352\1\345\1\353"+
    "\1\354\3\345\1\346\1\0\2\345\2\0\16\345\2\0"+
    "\4\347\4\0\1\345\1\0\1\345\2\0\1\347\3\345"+
    "\2\0\5\345\13\0\2\347\5\0\7\347\1\350\1\0"+
    "\1\351\1\0\1\352\1\0\1\353\1\354\31\0\4\347"+
    "\11\0\1\347\44\0\1\347\123\0\1\347\123\0\1\347"+
    "\101\0\1\347\144\0\1\347\63\0\1\u0136\2\0\1\u0136"+
    "\20\0\1\344\2\0\1\u0136\3\0\1\u0136\11\0\1\344"+
    "\31\0\1\u0136\22\0\1\u0137\1\0\3\u0138\1\0\2\u0138"+
    "\2\0\4\u0138\6\0\1\344\2\0\1\u0138\1\0\1\u0138"+
    "\1\0\1\u0138\2\0\1\u0138\5\0\1\u0138\1\344\1\0"+
    "\2\u0138\26\0\1\u0138\5\0\1\u0138\11\0\51\360\1\u0139"+
    "\50\360\1\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\1\7\1\0\1\7\1\0\1\7\2\0\3\7\1\153"+
    "\1\0\2\7\2\0\4\7\1\u013a\11\7\12\0\1\7"+
    "\1\0\1\7\3\0\3\7\2\0\5\7\1\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\1\7\1\0\1\7"+
    "\1\0\1\7\2\0\3\7\1\153\1\0\2\7\2\0"+
    "\1\u013b\15\7\12\0\1\7\1\0\1\7\3\0\3\7"+
    "\2\0\5\7\1\0\7\7\1\0\1\7\1\u013c\2\0"+
    "\4\7\11\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\3\7\1\153\1\0\2\7\2\0\16\7\12\0\1\7"+
    "\1\0\1\7\3\0\3\7\2\0\5\7\1\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\1\7\1\0\1\7"+
    "\1\0\1\7\2\0\3\7\1\153\1\0\2\7\2\0"+
    "\2\7\1\u013d\13\7\12\0\1\7\1\0\1\7\3\0"+
    "\3\7\2\0\5\7\1\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\3\7\1\153\1\0\2\7\2\0\6\7\1\u013e\7\7"+
    "\12\0\1\7\1\0\1\7\3\0\3\7\2\0\5\7"+
    "\1\0\7\7\1\0\2\7\2\0\4\7\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\2\7\2\0\4\7\1\u013f\11\7\12\0\1\7\1\0"+
    "\1\7\3\0\3\7\2\0\5\7\1\0\7\7\1\0"+
    "\1\7\1\u0140\2\0\4\7\11\0\1\7\1\0\1\7"+
    "\1\0\1\7\2\0\3\7\1\153\1\0\2\7\2\0"+
    "\16\7\12\0\1\7\1\0\1\7\3\0\3\7\2\0"+
    "\5\7\1\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\1\7\1\0\1\7\1\0\1\7\2\0\3\7\1\153"+
    "\1\0\2\7\2\0\12\7\1\u0141\3\7\12\0\1\7"+
    "\1\0\1\7\3\0\3\7\2\0\5\7\1\0\7\7"+
    "\1\0\1\7\1\u0142\2\0\4\7\11\0\1\7\1\0"+
    "\1\7\1\0\1\7\2\0\3\7\1\153\1\0\2\7"+
    "\2\0\16\7\12\0\1\7\1\0\1\7\3\0\3\7"+
    "\2\0\5\7\1\0\1\7\1\u0143\5\7\1\0\2\7"+
    "\2\0\4\7\11\0\1\7\1\0\1\7\1\0\1\7"+
    "\2\0\3\7\1\153\1\0\2\7\2\0\16\7\12\0"+
    "\1\7\1\0\1\7\3\0\3\7\2\0\5\7\1\0"+
    "\7\7\1\0\1\7\1\u0144\2\0\4\7\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\2\7\2\0\16\7\12\0\1\7\1\0\1\7\3\0"+
    "\3\7\2\0\5\7\1\0\1\7\1\u0145\5\7\1\0"+
    "\2\7\2\0\4\7\11\0\1\7\1\0\1\7\1\0"+
    "\1\7\2\0\3\7\1\153\1\0\2\7\2\0\16\7"+
    "\12\0\1\7\1\0\1\7\3\0\3\7\2\0\5\7"+
    "\1\0\7\7\1\0\1\7\1\u0146\2\0\4\7\11\0"+
    "\1\7\1\0\1\7\1\0\1\7\2\0\3\7\1\153"+
    "\1\0\2\7\2\0\16\7\12\0\1\7\1\0\1\7"+
    "\3\0\3\7\2\0\5\7\1\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\1\7\1\0\1\7\1\0\1\7"+
    "\2\0\3\7\1\153\1\0\2\7\2\0\7\7\1\u0147"+
    "\6\7\12\0\1\7\1\0\1\7\3\0\3\7\2\0"+
    "\5\7\1\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\1\7\1\0\1\7\1\0\1\7\2\0\3\7\1\153"+
    "\1\0\1\u0148\1\7\2\0\16\7\12\0\1\7\1\0"+
    "\1\7\3\0\3\7\2\0\5\7\1\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\1\7\1\0\1\7\1\0"+
    "\1\7\2\0\3\7\1\153\1\0\1\u0149\1\7\2\0"+
    "\16\7\12\0\1\7\1\0\1\7\3\0\3\7\2\0"+
    "\5\7\1\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\1\7\1\0\1\7\1\0\1\7\2\0\3\7\1\153"+
    "\1\0\2\7\2\0\1\u014a\15\7\12\0\1\7\1\0"+
    "\1\7\3\0\3\7\2\0\5\7\1\0\1\7\1\u014b"+
    "\5\7\1\0\2\7\2\0\4\7\11\0\1\7\1\0"+
    "\1\7\1\0\1\7\2\0\3\7\1\153\1\0\2\7"+
    "\2\0\6\7\1\u014c\7\7\12\0\1\7\1\0\1\7"+
    "\3\0\3\7\2\0\5\7\1\0\1\7\1\u014d\5\7"+
    "\1\0\2\7\2\0\4\7\11\0\1\7\1\0\1\7"+
    "\1\0\1\7\2\0\3\7\1\153\1\0\2\7\2\0"+
    "\16\7\12\0\1\7\1\0\1\7\3\0\3\7\2\0"+
    "\5\7\1\0\1\7\1\u014e\5\7\1\0\2\7\2\0"+
    "\4\7\11\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\3\7\1\153\1\0\2\7\2\0\16\7\12\0\1\7"+
    "\1\0\1\7\3\0\3\7\2\0\5\7\1\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\1\7\1\0\1\7"+
    "\1\0\1\7\2\0\3\7\1\153\1\0\2\7\2\0"+
    "\3\7\1\u014f\12\7\12\0\1\7\1\0\1\7\3\0"+
    "\3\7\2\0\5\7\14\0\1\u0150\61\0\1\u0151\24\0"+
    "\2\u0108\1\0\1\u0108\2\0\1\u0108\1\0\2\u0108\2\0"+
    "\4\u0108\13\0\1\u0108\5\0\1\u0108\1\0\1\u0108\1\0"+
    "\2\u0108\2\0\16\u0108\20\0\3\u0108\2\0\5\u0108\14\0"+
    "\1\u0152\61\0\1\u0153\24\0\2\u010b\1\0\1\u010b\2\0"+
    "\1\u010b\1\0\2\u010b\2\0\4\u010b\13\0\1\u010b\5\0"+
    "\1\u010b\1\0\1\u010b\1\0\2\u010b\2\0\16\u010b\20\0"+
    "\3\u010b\2\0\5\u010b\1\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\3\7\1\153\1\0\2\7\2\0\16\7\12\0\1\7"+
    "\1\0\1\7\3\0\3\7\2\0\3\7\1\u0154\1\7"+
    "\1\0\7\7\1\0\2\7\2\0\4\7\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\2\7\2\0\2\7\1\u0155\13\7\12\0\1\7\1\0"+
    "\1\7\3\0\3\7\2\0\5\7\1\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\1\7\1\0\1\7\1\0"+
    "\1\7\2\0\3\7\1\153\1\0\2\7\2\0\16\7"+
    "\12\0\1\7\1\0\1\7\3\0\3\7\2\0\2\7"+
    "\1\u0156\2\7\22\261\1\u0113\1\u0157\76\261\22\0\1\u0158"+
    "\102\0\1\u0116\1\0\2\u0116\2\0\2\u0117\2\0\4\u0118"+
    "\11\0\1\u0116\3\0\1\u0116\2\0\1\u0116\40\0\1\u0116"+
    "\22\0\1\u0159\1\0\2\u0159\4\0\2\u015a\15\0\1\u0159"+
    "\3\0\1\u0159\2\0\1\u0159\40\0\1\u0159\75\0\1\u015b"+
    "\117\0\1\u015c\126\0\1\u015d\117\0\1\u015e\144\0\1\u015f"+
    "\73\0\1\u0160\1\0\1\u0161\131\0\1\u0162\107\0\1\u0160"+
    "\57\0\1\u0163\163\0\1\u0164\61\0\1\u0165\61\0\1\u0166"+
    "\24\0\2\u0123\1\0\1\u0123\2\0\1\u0123\1\0\2\u0123"+
    "\2\0\4\u0123\13\0\1\u0123\5\0\1\u0123\1\0\1\u0123"+
    "\1\0\2\u0123\2\0\16\u0123\20\0\3\u0123\2\0\5\u0123"+
    "\14\0\1\u0167\61\0\1\u0168\24\0\2\u0126\1\0\1\u0126"+
    "\2\0\1\u0126\1\0\2\u0126\2\0\4\u0126\13\0\1\u0126"+
    "\5\0\1\u0126\1\0\1\u0126\1\0\2\u0126\2\0\16\u0126"+
    "\20\0\3\u0126\2\0\5\u0126\14\0\1\305\215\0\1\u0169"+
    "\12\0\7\313\1\0\2\313\2\315\4\313\1\0\7\315"+
    "\1\317\1\313\1\320\1\313\1\321\1\313\1\322\1\323"+
    "\3\313\1\u012c\1\0\2\313\2\0\16\313\2\0\4\315"+
    "\4\0\1\313\1\0\1\313\2\0\1\315\3\313\2\0"+
    "\5\313\21\316\1\u016a\5\316\1\u012e\15\316\1\0\35\316"+
    "\1\0\16\316\1\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\1\7\1\0\1\7\1\0\1\7\2\0\3\7"+
    "\1\153\1\0\2\7\2\0\5\7\1\u016b\10\7\12\0"+
    "\1\7\1\0\1\7\3\0\3\7\2\0\5\7\1\0"+
    "\7\7\1\0\1\7\1\u016c\2\0\4\7\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\2\7\2\0\16\7\12\0\1\7\1\0\1\7\3\0"+
    "\3\7\2\0\5\7\1\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\3\7\1\153\1\0\2\7\2\0\6\7\1\u016d\7\7"+
    "\12\0\1\7\1\0\1\7\3\0\3\7\2\0\5\7"+
    "\1\0\1\7\1\u016e\5\7\1\0\2\7\2\0\4\7"+
    "\11\0\1\7\1\0\1\7\1\0\1\7\2\0\3\7"+
    "\1\153\1\0\2\7\2\0\16\7\12\0\1\7\1\0"+
    "\1\7\3\0\3\7\2\0\5\7\13\u0158\2\u0135\5\u0158"+
    "\3\u0135\1\u016f\3\u0135\1\u0170\1\u0158\1\u0171\1\u0158\1\u0172"+
    "\1\u0158\1\u0173\1\u0174\31\u0158\4\u0135\11\u0158\1\u0135\12\u0158"+
    "\3\0\1\207\2\0\1\207\20\0\1\344\2\0\1\207"+
    "\3\0\1\207\11\0\1\344\31\0\1\207\22\0\1\u0175"+
    "\1\0\3\u0176\1\0\2\u0176\2\0\4\u0176\11\0\1\u0176"+
    "\1\0\1\u0176\1\0\1\u0176\2\0\1\u0176\5\0\1\u0176"+
    "\2\0\2\u0176\26\0\1\u0176\5\0\1\u0176\14\0\1\u0176"+
    "\1\0\3\u0176\1\0\2\u0176\2\0\4\u0176\11\0\1\u0176"+
    "\1\0\1\u0176\1\0\1\u0176\2\0\1\u0176\5\0\1\u0176"+
    "\2\0\2\u0176\26\0\1\u0176\5\0\1\u0176\11\0\51\360"+
    "\1\u0177\50\360\1\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\1\7\1\0\1\7\1\0\1\7\2\0\3\7"+
    "\1\153\1\0\2\7\2\0\4\7\1\u0178\11\7\12\0"+
    "\1\7\1\0\1\7\3\0\3\7\2\0\5\7\1\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\1\7\1\0"+
    "\1\7\1\0\1\7\2\0\3\7\1\153\1\0\2\7"+
    "\2\0\3\7\1\u0179\12\7\12\0\1\7\1\0\1\7"+
    "\3\0\3\7\2\0\5\7\1\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\1\7\1\0\1\7\1\0\1\7"+
    "\2\0\3\7\1\153\1\u017a\2\7\2\0\16\7\12\0"+
    "\1\7\1\u017a\1\u017b\2\u017a\1\0\3\7\2\0\5\7"+
    "\1\0\7\7\1\0\2\7\2\0\4\7\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\2\7\2\0\7\7\1\u017c\6\7\12\0\1\7\1\0"+
    "\1\7\3\0\3\7\2\0\5\7\1\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\1\7\1\0\1\7\1\0"+
    "\1\7\2\0\3\7\1\153\1\0\2\7\2\0\15\7"+
    "\1\u017d\12\0\1\7\1\0\1\7\3\0\3\7\2\0"+
    "\5\7\1\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\1\7\1\0\1\7\1\0\1\7\2\0\3\7\1\153"+
    "\1\0\2\7\2\0\2\7\1\u017e\13\7\12\0\1\7"+
    "\1\0\1\7\3\0\3\7\2\0\5\7\1\0\7\7"+
    "\1\0\1\7\1\u017f\2\0\4\7\11\0\1\7\1\0"+
    "\1\7\1\0\1\7\2\0\3\7\1\153\1\0\2\7"+
    "\2\0\16\7\12\0\1\7\1\0\1\7\3\0\3\7"+
    "\2\0\5\7\1\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\1\7\1\0\1\7\1\0\1\7\2\0\3\7"+
    "\1\153\1\0\2\7\2\0\7\7\1\u0180\6\7\12\0"+
    "\1\7\1\0\1\7\3\0\3\7\2\0\5\7\1\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\1\7\1\0"+
    "\1\7\1\0\1\7\2\0\3\7\1\153\1\0\2\7"+
    "\2\0\1\u0181\15\7\12\0\1\7\1\0\1\7\3\0"+
    "\3\7\2\0\5\7\1\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\3\7\1\153\1\0\2\7\2\0\7\7\1\u0182\6\7"+
    "\12\0\1\7\1\0\1\7\3\0\3\7\2\0\5\7"+
    "\1\0\7\7\1\0\2\7\2\0\4\7\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\2\7\2\0\7\7\1\u0183\6\7\12\0\1\7\1\0"+
    "\1\7\3\0\3\7\2\0\5\7\1\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\1\7\1\0\1\7\1\0"+
    "\1\7\2\0\3\7\1\153\1\0\2\7\2\0\12\7"+
    "\1\u0184\3\7\12\0\1\7\1\0\1\7\3\0\3\7"+
    "\2\0\5\7\1\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\1\7\1\0\1\7\1\0\1\7\2\0\3\7"+
    "\1\153\1\0\2\7\2\0\3\7\1\u0185\12\7\12\0"+
    "\1\7\1\0\1\7\3\0\3\7\2\0\5\7\1\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\1\7\1\0"+
    "\1\7\1\0\1\7\2\0\3\7\1\153\1\0\2\7"+
    "\2\0\12\7\1\u0186\3\7\12\0\1\7\1\0\1\7"+
    "\3\0\3\7\2\0\5\7\1\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\1\7\1\0\1\7\1\0\1\7"+
    "\2\0\3\7\1\153\1\0\2\7\2\0\7\7\1\u0187"+
    "\6\7\12\0\1\7\1\0\1\7\3\0\3\7\2\0"+
    "\5\7\1\0\7\7\1\0\2\7\2\0\3\7\1\u0188"+
    "\11\0\1\7\1\0\1\7\1\0\1\7\2\0\3\7"+
    "\1\153\1\0\2\7\2\0\16\7\12\0\1\7\1\0"+
    "\1\7\3\0\3\7\2\0\5\7\1\0\7\7\1\0"+
    "\1\7\1\u0189\2\0\4\7\11\0\1\7\1\0\1\7"+
    "\1\0\1\7\2\0\3\7\1\153\1\0\2\7\2\0"+
    "\16\7\12\0\1\7\1\0\1\7\3\0\3\7\2\0"+
    "\5\7\14\0\1\u0108\215\0\1\u018a\25\0\1\u010b\215\0"+
    "\1\u018b\12\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\1\7\1\0\1\7\1\0\1\7\2\0\3\7\1\153"+
    "\1\0\2\7\2\0\1\7\1\u018c\14\7\12\0\1\7"+
    "\1\0\1\7\3\0\3\7\2\0\5\7\1\0\7\7"+
    "\1\0\1\7\1\u018d\2\0\4\7\11\0\1\7\1\0"+
    "\1\7\1\0\1\7\2\0\3\7\1\153\1\0\2\7"+
    "\2\0\16\7\12\0\1\7\1\0\1\7\3\0\3\7"+
    "\2\0\5\7\1\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\1\7\1\0\1\7\1\0\1\7\2\0\3\7"+
    "\1\153\1\0\2\7\2\0\1\7\1\u018e\14\7\12\0"+
    "\1\7\1\0\1\7\3\0\3\7\2\0\5\7\25\u0158"+
    "\1\u018f\74\u0158\3\0\1\u0159\1\0\2\u0159\6\0\4\u0118"+
    "\11\0\1\u0159\3\0\1\u0159\2\0\1\u0159\40\0\1\u0159"+
    "\22\0\1\u0159\1\0\2\u0159\23\0\1\u0159\3\0\1\u0159"+
    "\2\0\1\u0159\40\0\1\u0159\31\0\1\272\121\0\1\u0190"+
    "\171\0\1\u0191\112\0\1\u0192\100\0\1\u0193\141\0\1\u0164"+
    "\61\0\1\u0194\155\0\1\u0195\55\0\1\u0196\174\0\1\272"+
    "\60\0\1\u0123\215\0\1\u0197\25\0\1\u0126\215\0\1\u0198"+
    "\30\0\1\u0199\103\0\7\7\1\0\2\7\2\0\3\7"+
    "\1\u019a\11\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\3\7\1\153\1\0\2\7\2\0\16\7\12\0\1\7"+
    "\1\0\1\7\3\0\3\7\2\0\5\7\1\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\1\7\1\0\1\7"+
    "\1\0\1\7\2\0\3\7\1\153\1\0\2\7\2\0"+
    "\11\7\1\u019b\4\7\12\0\1\7\1\0\1\7\3\0"+
    "\3\7\2\0\5\7\1\0\1\7\1\u019c\5\7\1\0"+
    "\2\7\2\0\4\7\11\0\1\7\1\0\1\7\1\0"+
    "\1\7\2\0\3\7\1\153\1\0\2\7\2\0\16\7"+
    "\12\0\1\7\1\0\1\7\3\0\3\7\2\0\5\7"+
    "\13\u0158\2\u0135\5\u0158\3\u0135\1\u019d\3\u0135\1\u0170\1\u0158"+
    "\1\u0171\1\u0158\1\u0172\1\u0158\1\u0173\1\u0174\31\u0158\4\u0135"+
    "\11\u0158\1\u0135\37\u0158\1\u018f\4\u0158\1\u0135\114\u0158\1\u018f"+
    "\6\u0158\1\u0135\112\u0158\1\u018f\10\u0158\1\u0135\101\u0158\1\u0135"+
    "\6\u0158\1\u018f\121\u0158\1\u018f\13\u0158\1\u0135\60\u0158\3\0"+
    "\1\u019e\1\0\3\u019f\1\0\2\u019f\2\0\4\u019f\11\0"+
    "\1\u019f\1\0\1\u019f\1\0\1\u019f\2\0\1\u019f\5\0"+
    "\1\u019f\2\0\2\u019f\26\0\1\u019f\5\0\1\u019f\14\0"+
    "\1\u019f\1\0\3\u019f\1\0\2\u019f\2\0\4\u019f\11\0"+
    "\1\u019f\1\0\1\u019f\1\0\1\u019f\2\0\1\u019f\5\0"+
    "\1\u019f\2\0\2\u019f\26\0\1\u019f\5\0\1\u019f\11\0"+
    "\51\360\1\u01a0\50\360\45\0\1\u017a\4\0\1\u01a1\5\0"+
    "\1\u01a2\22\0\4\u017a\14\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\3\7\1\153\1\u017a\2\7\2\0\1\u01a3\5\7\1\u01a4"+
    "\7\7\12\0\1\7\1\u017a\1\u017b\2\u017a\1\0\3\7"+
    "\2\0\5\7\1\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\1\7\1\0\1\7\1\0\1\7\2\0\3\7"+
    "\1\153\1\0\2\7\2\0\1\7\1\u01a5\14\7\12\0"+
    "\1\7\1\0\1\7\3\0\3\7\2\0\5\7\1\0"+
    "\7\7\1\0\2\7\2\0\3\7\1\u01a6\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\2\7\2\0\16\7\12\0\1\7\1\0\1\7\3\0"+
    "\3\7\2\0\5\7\1\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\3\7\1\153\1\0\2\7\2\0\2\7\1\u01a7\13\7"+
    "\12\0\1\7\1\0\1\7\3\0\3\7\2\0\5\7"+
    "\1\0\7\7\1\0\2\7\2\0\4\7\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\2\7\2\0\12\7\1\u01a8\3\7\12\0\1\7\1\0"+
    "\1\7\3\0\3\7\2\0\5\7\1\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\1\7\1\0\1\7\1\0"+
    "\1\7\2\0\3\7\1\153\1\0\2\7\2\0\5\7"+
    "\1\u01a9\10\7\12\0\1\7\1\0\1\7\3\0\3\7"+
    "\2\0\5\7\1\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\1\7\1\0\1\7\1\0\1\7\2\0\3\7"+
    "\1\153\1\0\2\7\2\0\7\7\1\u01aa\6\7\12\0"+
    "\1\7\1\0\1\7\3\0\3\7\2\0\5\7\1\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\1\7\1\0"+
    "\1\7\1\0\1\7\2\0\3\7\1\153\1\0\2\7"+
    "\2\0\1\u01ab\15\7\12\0\1\7\1\0\1\7\3\0"+
    "\3\7\2\0\5\7\1\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\3\7\1\153\1\0\2\7\2\0\2\7\1\u01ac\13\7"+
    "\12\0\1\7\1\0\1\7\3\0\3\7\2\0\5\7"+
    "\17\0\1\u01ad\121\0\1\u01ae\103\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\1\7\1\0\1\7\1\0\1\7"+
    "\2\0\3\7\1\153\1\0\2\7\2\0\16\7\12\0"+
    "\1\7\1\0\1\7\3\0\3\7\2\0\4\7\1\u01af"+
    "\1\0\7\7\1\0\2\7\2\0\4\7\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\2\7\2\0\1\u01b0\15\7\12\0\1\7\1\0\1\7"+
    "\3\0\3\7\2\0\5\7\1\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\1\7\1\0\1\7\1\0\1\7"+
    "\2\0\3\7\1\153\1\0\2\7\2\0\2\7\1\u01b1"+
    "\13\7\12\0\1\7\1\0\1\7\3\0\3\7\2\0"+
    "\5\7\25\u0158\1\u01b2\74\u0158\57\0\1\u01b3\122\0\1\u01b4"+
    "\43\0\1\u01b5\136\0\1\u01b6\21\0\1\u01b7\61\0\7\u0118"+
    "\1\0\2\u0118\2\0\4\u0118\11\0\1\u0118\1\0\1\u0118"+
    "\1\0\1\u0118\2\0\4\u0118\1\u01b8\2\u0118\2\0\16\u0118"+
    "\12\0\1\u0118\1\u01b8\1\u01b9\2\u01b8\1\0\3\u0118\2\0"+
    "\5\u0118\64\0\1\u01ba\55\0\1\272\120\0\1\u01bb\121\0"+
    "\1\u01bc\151\0\1\u01bd\53\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\3\7\1\153\1\0\2\7\2\0\4\7\1\u01be\11\7"+
    "\12\0\1\7\1\0\1\7\3\0\3\7\2\0\5\7"+
    "\1\0\7\7\1\0\1\7\1\u01bf\2\0\4\7\11\0"+
    "\1\7\1\0\1\7\1\0\1\7\2\0\3\7\1\153"+
    "\1\0\2\7\2\0\16\7\12\0\1\7\1\0\1\7"+
    "\3\0\3\7\2\0\5\7\1\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\1\7\1\0\1\7\1\0\1\7"+
    "\2\0\3\7\1\153\1\0\2\7\2\0\13\7\1\u01c0"+
    "\2\7\12\0\1\7\1\0\1\7\3\0\3\7\2\0"+
    "\5\7\13\u0158\2\u0135\5\u0158\1\u01c1\2\u0135\1\u019d\3\u0135"+
    "\1\u0170\1\u0158\1\u0171\1\u0158\1\u0172\1\u0158\1\u0173\1\u0174"+
    "\31\u0158\4\u0135\11\u0158\1\u0135\12\u0158\3\0\1\207\1\0"+
    "\3\207\1\0\2\207\2\0\4\207\11\0\1\207\1\0"+
    "\1\207\1\0\1\207\2\0\1\207\5\0\1\u01c2\2\0"+
    "\2\207\26\0\1\207\5\0\1\207\14\0\1\207\1\0"+
    "\3\207\1\0\2\207\2\0\4\207\11\0\1\207\1\0"+
    "\1\207\1\0\1\207\2\0\1\207\5\0\1\207\2\0"+
    "\2\207\26\0\1\207\5\0\1\207\13\0\1\u01c3\153\0"+
    "\1\u01c4\66\0\1\7\1\u01c5\5\7\1\0\2\7\2\0"+
    "\4\7\11\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\3\7\1\153\1\0\2\7\2\0\16\7\12\0\1\7"+
    "\1\0\1\7\3\0\3\7\2\0\5\7\1\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\1\7\1\0\1\u01c6"+
    "\1\0\1\7\2\0\3\7\1\153\1\0\2\7\2\0"+
    "\16\7\12\0\1\7\1\0\1\7\3\0\3\7\2\0"+
    "\5\7\1\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\1\7\1\0\1\7\1\0\1\7\2\0\3\7\1\153"+
    "\1\0\2\7\2\0\1\u01c7\15\7\12\0\1\7\1\0"+
    "\1\7\3\0\3\7\2\0\5\7\1\0\7\7\1\0"+
    "\2\7\2\0\3\7\1\u01c8\11\0\1\7\1\0\1\7"+
    "\1\0\1\7\2\0\3\7\1\153\1\0\2\7\2\0"+
    "\16\7\12\0\1\7\1\0\1\7\3\0\3\7\2\0"+
    "\5\7\1\0\7\7\1\0\1\7\1\u01c9\2\0\4\7"+
    "\11\0\1\7\1\0\1\7\1\0\1\7\2\0\3\7"+
    "\1\153\1\0\2\7\2\0\16\7\12\0\1\7\1\0"+
    "\1\7\3\0\3\7\2\0\5\7\1\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\1\7\1\0\1\7\1\0"+
    "\1\7\2\0\3\7\1\153\1\0\2\7\2\0\12\7"+
    "\1\u01ca\3\7\12\0\1\7\1\0\1\7\3\0\3\7"+
    "\2\0\5\7\47\0\1\u01cb\121\0\1\u01cc\53\0\7\7"+
    "\1\0\1\7\1\u01cd\2\0\4\7\11\0\1\7\1\0"+
    "\1\7\1\0\1\7\2\0\3\7\1\153\1\0\2\7"+
    "\2\0\16\7\12\0\1\7\1\0\1\7\3\0\3\7"+
    "\2\0\5\7\1\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\1\7\1\0\1\7\1\0\1\7\2\0\3\7"+
    "\1\153\1\0\2\7\2\0\2\7\1\u01ce\13\7\12\0"+
    "\1\7\1\0\1\7\3\0\3\7\2\0\5\7\1\0"+
    "\7\7\1\0\1\7\1\u01cf\2\0\4\7\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\2\7\2\0\16\7\12\0\1\7\1\0\1\7\3\0"+
    "\3\7\2\0\5\7\22\u0158\1\u01d0\2\u0158\1\u01b2\74\u0158"+
    "\20\0\1\u01d1\164\0\1\u01d2\40\0\1\u01d3\221\0\1\270"+
    "\22\0\1\270\163\0\1\u01b8\4\0\1\u01d4\5\0\1\u01d5"+
    "\22\0\4\u01b8\74\0\1\u01d6\107\0\1\u01d7\121\0\1\u01d8"+
    "\163\0\1\u01d9\10\0\13\u0158\2\u0135\5\u0158\1\u0135\1\u01da"+
    "\1\u0135\1\u016f\3\u0135\1\u0170\1\u0158\1\u0171\1\u0158\1\u0172"+
    "\1\u0158\1\u0173\1\u0174\31\u0158\4\u0135\11\u0158\1\u0135\12\u0158"+
    "\50\0\1\344\124\0\1\u01db\160\0\1\u01dc\10\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\1\7\1\0\1\7"+
    "\1\0\1\7\2\0\3\7\1\153\1\0\2\7\2\0"+
    "\1\7\1\u01dd\14\7\12\0\1\7\1\0\1\7\3\0"+
    "\3\7\2\0\5\7\1\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\3\7\1\153\1\0\2\7\2\0\16\7\12\0\1\7"+
    "\1\0\1\7\3\0\2\7\1\u01de\2\0\5\7\1\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\1\7\1\0"+
    "\1\7\1\0\1\7\2\0\3\7\1\153\1\0\2\7"+
    "\2\0\2\7\1\u01df\13\7\12\0\1\7\1\0\1\7"+
    "\3\0\3\7\2\0\5\7\1\0\7\7\1\0\1\7"+
    "\1\u01e0\2\0\4\7\11\0\1\7\1\0\1\7\1\0"+
    "\1\7\2\0\3\7\1\153\1\0\2\7\2\0\16\7"+
    "\12\0\1\7\1\0\1\7\3\0\3\7\2\0\5\7"+
    "\1\0\7\7\1\0\2\7\2\0\4\7\11\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\0\3\7\1\153\1\0"+
    "\2\7\2\0\4\7\1\u01e1\11\7\12\0\1\7\1\0"+
    "\1\7\3\0\3\7\2\0\5\7\1\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\1\7\1\0\1\7\1\0"+
    "\1\7\2\0\3\7\1\153\1\0\2\7\2\0\2\7"+
    "\1\u01e2\13\7\12\0\1\7\1\0\1\7\3\0\3\7"+
    "\2\0\5\7\111\0\1\u01e3\121\0\1\u01e4\11\0\7\7"+
    "\1\0\1\7\1\u01e5\2\0\4\7\11\0\1\7\1\0"+
    "\1\7\1\0\1\7\2\0\3\7\1\153\1\0\2\7"+
    "\2\0\16\7\12\0\1\7\1\0\1\7\3\0\3\7"+
    "\2\0\5\7\23\u0158\1\u01e6\1\u0158\1\u018f\74\u0158\56\0"+
    "\1\272\55\0\1\270\174\0\1\272\36\0\1\u01e7\153\0"+
    "\1\u01e8\77\0\1\u01d1\220\0\1\u01e9\121\0\1\u01ea\57\0"+
    "\1\u01eb\130\0\1\u01ec\55\0\1\u01ed\110\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\1\7\1\0\1\7\1\0"+
    "\1\7\2\0\3\7\1\153\1\0\2\7\2\0\4\7"+
    "\1\u01ee\11\7\12\0\1\7\1\0\1\7\3\0\3\7"+
    "\2\0\5\7\1\0\7\7\1\0\1\7\1\u01ef\2\0"+
    "\4\7\11\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\3\7\1\153\1\0\2\7\2\0\16\7\12\0\1\7"+
    "\1\0\1\7\3\0\3\7\2\0\5\7\47\0\1\u01f0"+
    "\121\0\1\u01f1\53\0\7\7\1\0\2\7\2\0\3\7"+
    "\1\u01f2\11\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\3\7\1\153\1\0\2\7\2\0\16\7\12\0\1\7"+
    "\1\0\1\7\3\0\3\7\2\0\5\7\53\0\1\u01f3"+
    "\160\0\1\u01f4\56\0\1\u01f5\121\0\1\u01f6\150\0\1\305"+
    "\101\0\1\u01f7\115\0\1\u01f8\50\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\1\7\1\0\1\7\1\0\1\7"+
    "\2\0\3\7\1\153\1\0\2\7\2\0\4\7\1\u01f9"+
    "\11\7\12\0\1\7\1\0\1\7\3\0\3\7\2\0"+
    "\5\7\1\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\1\7\1\0\1\7\1\0\1\7\2\0\3\7\1\153"+
    "\1\0\2\7\2\0\1\u01fa\15\7\12\0\1\7\1\0"+
    "\1\7\3\0\3\7\2\0\5\7\76\0\1\u0108\121\0"+
    "\1\u010b\101\0\1\u01fb\55\0\1\u01fc\205\0\1\u0123\121\0"+
    "\1\u0126\77\0\1\u01f7\46\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\3\7\1\153\1\0\2\7\2\0\2\7\1\u01f9\13\7"+
    "\12\0\1\7\1\0\1\7\3\0\3\7\2\0\5\7"+
    "\56\0\1\u0118\115\0\1\u01fd\123\0\1\u0118\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31324];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\2\1\2\3\36\1\2\11\3\1\5\11"+
    "\5\1\4\11\2\1\2\3\43\1\1\11\3\1\1\3"+
    "\1\1\1\11\3\1\2\3\2\0\1\1\1\0\1\11"+
    "\3\1\5\0\5\1\1\0\1\11\1\0\3\1\1\0"+
    "\3\1\5\0\1\1\1\0\31\1\2\0\4\1\2\0"+
    "\1\11\1\1\1\5\2\1\1\15\1\1\1\5\5\1"+
    "\1\5\2\1\1\3\1\0\1\11\2\0\1\1\1\0"+
    "\1\3\3\5\6\0\1\1\1\0\10\1\5\0\1\1"+
    "\1\11\3\1\7\0\1\11\1\0\27\1\1\11\2\0"+
    "\1\11\2\0\5\1\3\0\1\5\1\0\1\15\12\0"+
    "\1\11\2\0\1\11\4\0\1\1\1\5\1\15\1\0"+
    "\7\1\4\0\2\1\1\3\23\1\4\0\4\1\1\0"+
    "\1\5\20\0\1\5\5\1\10\0\2\1\1\0\17\1"+
    "\2\0\3\1\5\0\1\1\5\0\4\1\2\0\1\11"+
    "\2\0\12\1\2\0\3\1\7\0\1\5\4\0\4\1"+
    "\3\0\6\1\2\0\3\1\12\0\1\1\2\0\6\1"+
    "\2\0\2\1\7\0\2\1\2\0\1\1\4\0\1\15"+
    "\1\0\1\5\1\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[509];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // Stack for braces
    private Stack <IElementType> braceStack = new Stack<IElementType>();

    /* Defines, is in this section new line is whitespace or not? */
    public boolean newLineAllowed(){
      if (braceStack.isEmpty()){
        return true;
      } else {
        return ScalaTokenTypes.tLBRACE.equals(braceStack.peek());
      }
    }

    /* Changes state depending on brace stack */
    private void changeState(){
      if (braceStack.isEmpty()) {
        yybegin(YYINITIAL);
      } else if ( tLPARENTHESIS.equals(braceStack.peek()) || tLSQBRACKET.equals(braceStack.peek()) ){
        yybegin(NEW_LINE_DEPRECATED);
      } else {
        yybegin(COMMON_STATE);
      }
    }

    /* removes brace from stack */
    private IElementType popBraceStack(IElementType elem){
     if (
          !braceStack.isEmpty() &&
          (
            (elem.equals(tRSQBRACKET) && tLSQBRACKET.equals(braceStack.peek())) ||
            (elem.equals(tRBRACE) && tLBRACE.equals(braceStack.peek())) ||
            (elem.equals(tRPARENTHESIS) && tLPARENTHESIS.equals(braceStack.peek()))
          )
        ) {
          braceStack.pop();
          return process(elem);
        } else if (elem.equals(tFUNTYPE)) {
          if (!braceStack.isEmpty() && kCASE.equals(braceStack.peek())) {
            braceStack.pop();
          }
          return process(elem);
        } else {
          return process(elem);
        }
    }

    private IElementType process(IElementType type){
        return type;
    }


  public _ScalaCoreLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaCoreLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;

      zzWasPushback = false;

      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 68: 
          { return process(kCATCH);
          }
        case 92: break;
        case 70: 
          { return process(kTRAIT);
          }
        case 93: break;
        case 43: 
          { changeState();
                                            yypushback(yytext().length());
                                            return SCALA_XML_CONTENT_START;
          }
        case 94: break;
        case 32: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tSYMBOL);
          }
        case 95: break;
        case 90: 
          { return process(kPROTECTED);
          }
        case 96: break;
        case 36: 
          { return process(tLOWER_BOUND);
          }
        case 97: break;
        case 31: 
          { return process(tLINE_COMMENT);
          }
        case 98: break;
        case 58: 
          { return process(tSH_COMMENT);
          }
        case 99: break;
        case 6: 
          { return process(tCOLON);
          }
        case 100: break;
        case 81: 
          { return process(kEXTENDS);
          }
        case 101: break;
        case 52: 
          { return process(kVAR);
          }
        case 102: break;
        case 2: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tIDENTIFIER);
          }
        case 103: break;
        case 25: 
          { yypushback(yylength());
                                                    changeState();
          }
        case 104: break;
        case 12: 
          { return process(tSEMICOLON);
          }
        case 105: break;
        case 55: 
          { yybegin(WAIT_FOR_XML);
                                                   yypushback(2);
                                                   return process(tWHITE_SPACE_IN_LINE);
          }
        case 106: break;
        case 15: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tRPARENTHESIS);
          }
        case 107: break;
        case 78: 
          { return process(kOBJECT);
          }
        case 108: break;
        case 24: 
          { yybegin(WAIT_FOR_XML); return process(tLINE_TERMINATOR);
          }
        case 109: break;
        case 40: 
          { return popBraceStack(tFUNTYPE);
          }
        case 110: break;
        case 1: 
          { return process(tSTUB);
          }
        case 111: break;
        case 64: 
          { return process(kWITH);
          }
        case 112: break;
        case 38: 
          { return process(tUPPER_BOUND);
          }
        case 113: break;
        case 4: 
          { return process(tDOT);
          }
        case 114: break;
        case 76: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tMULTILINE_STRING);
          }
        case 115: break;
        case 72: 
          { return process(kMATCH);
          }
        case 116: break;
        case 11: 
          { return process(tCOMMA);
          }
        case 117: break;
        case 20: 
          { yybegin(PROCESS_NEW_LINE);
                                            return popBraceStack(tRPARENTHESIS);
          }
        case 118: break;
        case 22: 
          { yybegin(PROCESS_NEW_LINE);
                                            return popBraceStack(tRBRACE);
          }
        case 119: break;
        case 41: 
          { yypushback(1);
                                                    changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                      return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 120: break;
        case 69: 
          { return process(kTHROW);
          }
        case 121: break;
        case 42: 
          { changeState();
                                                    return process(tWHITE_SPACE_IN_LINE);
          }
        case 122: break;
        case 51: 
          { return process(kVAL);
          }
        case 123: break;
        case 85: 
          { return process(kPRIVATE);
          }
        case 124: break;
        case 65: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kFALSE);
          }
        case 125: break;
        case 83: 
          { return process(kFINALLY);
          }
        case 126: break;
        case 82: 
          { return process(kFOR_SOME);
          }
        case 127: break;
        case 62: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kTYPE);
          }
        case 128: break;
        case 27: 
          { return process(tWHITE_SPACE_IN_LINE);
          }
        case 129: break;
        case 28: 
          { changeState();
                                            yypushback(yytext().length());
          }
        case 130: break;
        case 77: 
          { return process(kSEALED);
          }
        case 131: break;
        case 67: 
          { return process(kCLASS);
          }
        case 132: break;
        case 79: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kRETURN);
          }
        case 133: break;
        case 87: 
          { return process(kOVERRIDE);
          }
        case 134: break;
        case 84: 
          { return process(kPACKAGE);
          }
        case 135: break;
        case 50: 
          { braceStack.push(tLPARENTHESIS);
                                            yypushback(yytext().length() - 1);
                                            yybegin(WAIT_FOR_XML);
                                            return process(tLPARENTHESIS);
          }
        case 136: break;
        case 30: 
          { return process(kDO);
          }
        case 137: break;
        case 26: 
          { changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                      return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 138: break;
        case 44: 
          { return process(kFOR);
          }
        case 139: break;
        case 33: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tSTRING);
          }
        case 140: break;
        case 17: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tRBRACE);
          }
        case 141: break;
        case 37: 
          { return process(tCHOOSE);
          }
        case 142: break;
        case 16: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tRSQBRACKET);
          }
        case 143: break;
        case 73: 
          { return process(kYIELD);
          }
        case 144: break;
        case 7: 
          { return process(tAT);
          }
        case 145: break;
        case 46: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tCHAR);
          }
        case 146: break;
        case 8: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tUNDER);
          }
        case 147: break;
        case 48: 
          { return process(kNEW);
          }
        case 148: break;
        case 88: 
          { return process(kREQUIRES);
          }
        case 149: break;
        case 14: 
          { braceStack.push(tLSQBRACKET);
                                            yybegin(NEW_LINE_DEPRECATED);
                                            return process(tLSQBRACKET);
          }
        case 150: break;
        case 23: 
          { yypushback(1);  yybegin(YYINITIAL);
          }
        case 151: break;
        case 3: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tINTEGER);
          }
        case 152: break;
        case 39: 
          { return process(tVIEW);
          }
        case 153: break;
        case 29: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tFLOAT);
          }
        case 154: break;
        case 89: 
          { return process(kIMPLICIT);
          }
        case 155: break;
        case 19: 
          { braceStack.push(tLPARENTHESIS);
                                            yybegin(NEW_LINE_DEPRECATED);
                                            return process(tLPARENTHESIS);
          }
        case 156: break;
        case 66: 
          { return process(kFINAL);
          }
        case 157: break;
        case 47: 
          { return process(kTRY);
          }
        case 158: break;
        case 5: 
          { return process(tINNER_CLASS);
          }
        case 159: break;
        case 56: 
          { return process(kLAZY);
          }
        case 160: break;
        case 71: 
          { return process(kSUPER);
          }
        case 161: break;
        case 91: 
          { return process(kCASE);
          }
        case 162: break;
        case 10: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tWRONG_STRING);
          }
        case 163: break;
        case 53: 
          { changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                     return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 164: break;
        case 75: 
          { yypushback(4);
                                                   changeState();
                                                   return process(tWHITE_SPACE_IN_LINE);
          }
        case 165: break;
        case 13: 
          { return process(tASSIGN);
          }
        case 166: break;
        case 61: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kTRUE);
          }
        case 167: break;
        case 80: 
          { return process(kIMPORT);
          }
        case 168: break;
        case 18: 
          { braceStack.push(tLBRACE);
                                            return process(tLBRACE);
          }
        case 169: break;
        case 86: 
          { return process(kABSTRACT);
          }
        case 170: break;
        case 49: 
          { braceStack.push(tLBRACE);
                                            yypushback(yytext().length() - 1);
                                            yybegin(WAIT_FOR_XML);
                                            return process(tLBRACE);
          }
        case 171: break;
        case 34: 
          { return process(kIF);
          }
        case 172: break;
        case 59: 
          { braceStack.push(kCASE);
                                            yybegin(NEW_LINE_DEPRECATED);
                                            return process(kCASE);
          }
        case 173: break;
        case 60: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kTHIS);
          }
        case 174: break;
        case 9: 
          { yybegin(WAIT_FOR_XML);
                                            return process(tWHITE_SPACE_IN_LINE);
          }
        case 175: break;
        case 21: 
          { yybegin(PROCESS_NEW_LINE);
                                            return popBraceStack(tRSQBRACKET);
          }
        case 176: break;
        case 63: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kNULL);
          }
        case 177: break;
        case 35: 
          { return process(tFUNTYPE);
          }
        case 178: break;
        case 74: 
          { return process(kWHILE);
          }
        case 179: break;
        case 45: 
          { return process(kDEF);
          }
        case 180: break;
        case 54: 
          { yybegin(WAIT_FOR_XML);
                                                    yypushback(2);
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                      return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 181: break;
        case 57: 
          { return process(kELSE);
          }
        case 182: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
